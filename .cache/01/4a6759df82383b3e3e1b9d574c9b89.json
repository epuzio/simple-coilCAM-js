{"id":"node_modules/flatten-interval-tree/classes/node.js","dependencies":[{"name":"/Users/esmepuzio/coilCAM-js/package.json","includedInParent":true,"mtime":1712104760385},{"name":"/Users/esmepuzio/coilCAM-js/node_modules/flatten-interval-tree/package.json","includedInParent":true,"mtime":1711910413363},{"name":"../classes/interval","loc":{"line":8,"column":23,"index":149},"parent":"/Users/esmepuzio/coilCAM-js/node_modules/flatten-interval-tree/classes/node.js","resolved":"/Users/esmepuzio/coilCAM-js/node_modules/flatten-interval-tree/classes/interval.js"},{"name":"../utils/constants","loc":{"line":9,"column":55,"index":229},"parent":"/Users/esmepuzio/coilCAM-js/node_modules/flatten-interval-tree/classes/node.js","resolved":"/Users/esmepuzio/coilCAM-js/node_modules/flatten-interval-tree/utils/constants.js"}],"generated":{"js":"/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n'use strict';\r\n\r\n// let defaultTraits = require('../utils/numeric_traits');\r\nlet Interval = require('../classes/interval');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('../utils/constants');\r\n\r\nlet Node = class Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be       instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    less_than(other_node) {\r\n        return this.item.key.less_than(other_node.item.key);\r\n    }\r\n\r\n    equal_to(other_node) {\r\n        let value_equal = true;\r\n        if (this.item.value && other_node.item.value) {\r\n            value_equal = this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n                this.item.value == other_node.item.value;\r\n        }\r\n        return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key.clone();\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let high = this.left.max.high ? this.left.max.high : this.left.max;\r\n        return val_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let low = this.right.max.low ? this.right.max.low : this.right.item.key.low;\r\n        return val_less_than(search_node.item.key.high, low);\r\n    }\r\n};\r\n\r\nmodule.exports = Node;\r\n\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/flatten-interval-tree/classes/node.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}}],"sources":{"node_modules/flatten-interval-tree/classes/node.js":"/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n'use strict';\r\n\r\n// let defaultTraits = require('../utils/numeric_traits');\r\nlet Interval = require('../classes/interval');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('../utils/constants');\r\n\r\nlet Node = class Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be       instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    less_than(other_node) {\r\n        return this.item.key.less_than(other_node.item.key);\r\n    }\r\n\r\n    equal_to(other_node) {\r\n        let value_equal = true;\r\n        if (this.item.value && other_node.item.value) {\r\n            value_equal = this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n                this.item.value == other_node.item.value;\r\n        }\r\n        return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key.clone();\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let high = this.left.max.high ? this.left.max.high : this.left.max;\r\n        return val_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let low = this.right.max.low ? this.right.max.low : this.right.item.key.low;\r\n        return val_less_than(search_node.item.key.high, low);\r\n    }\r\n};\r\n\r\nmodule.exports = Node;\r\n\r\n"},"lineCount":87}},"error":null,"hash":"db4710d0822a6083f8d0b9eed616c6d7","cacheData":{"env":{}}}