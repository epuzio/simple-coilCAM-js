{"version":3,"sources":["webpack://flatten/webpack/universalModuleDefinition","webpack://flatten/webpack/bootstrap","webpack://flatten/./node_modules/flatten-interval-tree/index.js","webpack://flatten/./node_modules/flatten-interval-tree/utils/constants.js","webpack://flatten/./index.js","webpack://flatten/./utils/utils.js","webpack://flatten/./utils/errors.js","webpack://flatten/./classes/matrix.js","webpack://flatten/./data_structures/planar_set.js","webpack://flatten/./node_modules/flatten-interval-tree/classes/node.js","webpack://flatten/./node_modules/flatten-interval-tree/classes/interval.js","webpack://flatten/./classes/point.js","webpack://flatten/./classes/vector.js","webpack://flatten/./classes/line.js","webpack://flatten/./classes/circle.js","webpack://flatten/./classes/segment.js","webpack://flatten/./classes/arc.js","webpack://flatten/./classes/box.js","webpack://flatten/./classes/edge.js","webpack://flatten/./classes/face.js","webpack://flatten/./classes/ray.js","webpack://flatten/./algorithms/ray_shooting.js","webpack://flatten/./classes/polygon.js","webpack://flatten/./algorithms/distance.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Node","RB_TREE_COLOR_RED","RB_TREE_COLOR_BLACK","nil_node","IntervalTree","[object Object]","this","size","count","tree_walk","keys","res","node","push","item","output","values","items","isEmpty","undefined","insert_node","tree_insert","recalc_max","search_node","tree_search","delete_node","tree_delete","interval","resp_nodes","tree_search_interval","resp","forEach","visitor","callback","tree","insert","node_current","parent","update_max","current_node","parent_node","less_than","left","right","insert_fixup","uncle_node","color","rotate_left","rotate_right","cut_node","fix_node","tree_successor","copy_data","delete_fixup","brother_node","equal_to","not_intersect_left_subtree","intersect","not_intersect_right_subtree","node_min","node_max","node_successor","local_minimum","x","y","action","height","heightLeft","heightRight","testBlackHeightProperty","Error","Utils","Errors","f","DP_TOL","CCW","CW","ORIENTATION","NOT_ORIENTABLE","PIx2","Math","PI","INSIDE","OUTSIDE","BOUNDARY","CONTAINS","INTERLACE","OVERLAP_SAME","OVERLAP_OPPOSITE","EQ_0","EQ","GT","GE","LT","LE","ILLEGAL_PARAMETERS","ReferenceError","ZERO_DIVISION","Flatten","Matrix","a","b","tx","ty","vector","other_matrix","args","length","Vector","multiply","angle","cos","sin","sx","sy","matrix","PlanarSet","Set","super","index","shape","add","box","deleted","delete","remove","clear","search","point","Box","filter","on","reduce","acc","svg","Interval","Array","Number","isNaN","min","max","other_node","value_equal","clone","maximal_val","val_less_than","high","low","other_interval","not_intersect","val1","val2","Point","arr","vertices","pt","center","x_rot","y_rot","transform","line","equalTo","vec","cross","norm","dist","dot","proj_vec","translate","Distance","dx","dy","sqrt","Segment","Line","point2line","Circle","point2circle","point2segment","Arc","point2arc","Polygon","point2polygon","shape2planarSet","contains","attrs","stroke","strokeWidth","fill","id","className","id_str","class_str","assign","a1","a2","slope","atan2","v","scalar","rpoint","rotate","norm1","normalize","norm2","points2norm","standard","other_line","parallelTo","intersectLine2Line","intersectLine2Circle","intersectLine2Arc","intersectLine2Polygon","distance","shortest_segment","reverse","circle2line","segment2line","arc2line","shape2polygon","ip","intersectLine2Box","ps","pe","find","pt1","pt2","rotate90CCW","line1","line2","A1","B1","C1","A2","B2","C2","det","detX","detY","new_ip","circle","prj","pc","projectionOn","distanceTo","v_trans","delta","rotate90CW","pts","xmin","ymin","xmax","ymax","segs","ips","seg","ips_tmp","arc","ip_tmp","counterclockwise","intersectCirle2Circle","intersectShape2Polygon","circle2circle","segment2circle","arc2circle","circle1","circle2","r1","r2","abs","mid_pt","h","fillOpacity","coords","start","end","distanceToPoint","intersectSegment2Line","intersectSegment2Segment","intersectSegment2Circle","intersectSegment2Arc","segment2segment","segment2arc","rest","isZeroLength","leftTo","seg1","seg2","incidentTo","segment","startAngle","endAngle","counterClockwise","sweep","breakToFunctional","merge","test_arc","intersectArc2Circle","intersectArc2Arc","arc2arc","func_arcs_array","angles","test_arcs","sort","arc1","arc2","new_arc","prev_arc","newStart","newEnd","newCenter","arcSE","circularSegmentDefiniteIntegral","onLeftSide","areaTrapez","definiteIntegral","areaCircularSegment","circularSegmentArea","largeArcFlag","sweepFlag","other_box","lessThan","box1","box2","width","Edge","next","prev","face","arc_length","bvStart","bvEnd","bv","overlap","middle","polygon","ray_shoot","bvMiddle","edge","flag","shape1","shape2","sign","halfArc1","halfArc2","toJSON","Face","first","last","_box","_orientation","shapes","every","segments","points2segments","shapes2face","edges","flattenShapes","flattenShape","toArc","setArcLength","iterator","done","face_edges","counter","points","append","newEdge","edgeBefore","edgeAfter","edge_tmp","orientation","signedArea","sArea","area","getSelfIntersections","exitOnFirst","int_points","edge1","edge2","map","svgStr","Ray","POSITIVE_INFINITY","intersectRay2Segment","intersectRay2Arc","ray","resp_edges","intersections","i1","i2","intersection","prev_edge","prev_tangent","tangentInEnd","prev_point","cur_tangent","tangentInStart","cur_point","prev_on_the_left","cur_on_the_left","next_edge","next_tangent","next_point","next_on_the_left","faces","edgeFrom","edgeTo","deleteFace","split","addFace","rel","min_dist_and_segment","min_stop","intersectPolygon2Polygon","valid","isSimple","newPolygon","polygon1","polygon2","fillRule","closest_point","dist2center","shortest_dist","point2point","v_seg","v_ps2pt","v_pe2pt","start_sp","end_sp","v_unit","dist_and_segment","dist_from_start","shortest_segment_from_start","dist_from_end","shortest_segment_from_end","dist_from_center","shortest_segment_from_center","dist_from_projection","shortest_segment_from_projection","dist_tmp","segment_tmp","ip1","ip2","mindist_x","mindist_y","mindist","level","maxdist","box2box_minmax","new_level_left","isNil","new_level_right","new_level","minmax_tree_process_level","set","squared_min_stop","min_dist_and_segment_new","stop","minmax_tree_calc_distance","minmax_tree","d1","d2"],"mappings":"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","file":"flatten.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flatten\"] = factory();\n\telse\n\t\troot[\"flatten\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\r\n * Created by Alex Bol on 3/31/2017.\r\n */\r\n'use strict';\r\n\r\nlet Node = require('./classes/node');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('./utils/constants');\r\n\r\nlet nil_node = new Node();\r\n\r\n/**\r\n * Implementation of interval binary search tree <br/>\r\n * Interval tree may store items which are couples of {key:interval, value: value} <br/>\r\n * Interval is an object with high and low properties or simply array of numeric [low,high] values <br />\r\n * If interval is an object, it should implement and expose methods less_than, equals_to, intersect and others,\r\n * see documentation {link}\r\n * @type {IntervalTree}\r\n */\r\nlet IntervalTree = class IntervalTree {\r\n    /**\r\n     * Construct new empty instance of IntervalTree\r\n     */\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    /**\r\n     * Returns number of items stored in the interval tree\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let count = 0;\r\n        this.tree_walk(this.root, () => count++);\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns array of sorted keys in the ascending order\r\n     * @returns {Array}\r\n     */\r\n    get keys() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(node.item.key.output()));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Return array of values in the ascending keys order\r\n     * @returns {Array}\r\n     */\r\n    get values() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(node.item.value));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns array of items (<key,value> pairs) in the ascended keys order\r\n     * @returns {Array}\r\n     */\r\n    get items() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push({key: node.item.key.output(), value: node.item.value}));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns true if tree is empty\r\n     * @returns {boolean}\r\n     */\r\n    get isEmpty() {\r\n        return (this.root == null || this.root == nil_node);\r\n    }\r\n\r\n    /**\r\n     * Insert new item into interval tree\r\n     * @param key - interval object or array of two numbers [low, high]\r\n     * @param value - value representing any object (optional)\r\n     * @returns {Node} - returns reference to inserted node as an object {key:interval, value: value}\r\n     */\r\n    insert(key, value = key) {\r\n        if (key === undefined) return;\r\n        let insert_node = new Node(key, value, nil_node, nil_node, null, RB_TREE_COLOR_RED);\r\n        this.tree_insert(insert_node);\r\n        this.recalc_max(insert_node);\r\n        return insert_node;\r\n    }\r\n\r\n    /**\r\n     * Returns true if item {key,value} exist in the tree\r\n     * @param key - interval correspondent to keys stored in the tree\r\n     * @param value - value object to be checked\r\n     * @returns {boolean} - true if item {key, value} exist in the tree, false otherwise\r\n     */\r\n    exist(key, value) {\r\n        let search_node = new Node(key, value);\r\n        return this.tree_search(this.root, search_node) ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Remove entry {key, value} from the tree\r\n     * @param key - interval correspondent to keys stored in the tree\r\n     * @param value - - value object\r\n     * @returns {boolean} - true if item {key, value} deleted, false if not found\r\n     */\r\n    remove(key, value) {\r\n        let search_node = new Node(key, value);\r\n        let delete_node = this.tree_search(this.root, search_node);\r\n        if (delete_node) {\r\n            this.tree_delete(delete_node);\r\n        }\r\n        return delete_node;\r\n    }\r\n\r\n    /**\r\n     * Returns array of entry values which keys intersect with given interval <br/>\r\n     * If no values stored in the tree, returns array of keys which intersect given interval\r\n     * @param interval - search interval, or array [low, high]\r\n     * @returns {Array}\r\n     */\r\n    search(interval) {\r\n        let search_node = new Node(interval);\r\n        let resp_nodes = [];\r\n        this.tree_search_interval(this.root, search_node, resp_nodes);\r\n        let resp = [];\r\n        resp_nodes.forEach((node) => {\r\n            if (node.item.value) {         // if there are values, return only values\r\n                resp.push(node.item.value);\r\n            }\r\n            else {                         // otherwise, return keys\r\n                resp.push(node.item.key.output());\r\n            }\r\n        }, []);\r\n        return resp;\r\n    }\r\n\r\n    /**\r\n     * Tree visitor. For each node implement a callback function. <br/>\r\n     * Method calls a callback function with two parameters (key, value)\r\n     * @param visitor(key,value) - function to be called for each tree item\r\n     */\r\n    forEach(visitor) {\r\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\r\n    }\r\n    \r\n    /** Value Mapper. Walk through every node and map node value to another value\r\n     * @param callback(value, key) - function to be called for each tree item\r\n     */\r\n    map(callback) {\r\n        const tree = new IntervalTree();\r\n        this.tree_walk(this.root, (node) => tree.insert(node.item.key, callback(node.item.value, node.item.key)));\r\n        return tree;\r\n    }\r\n\r\n    recalc_max(node) {\r\n        let node_current = node;\r\n        while (node_current.parent != null) {\r\n            node_current.parent.update_max();\r\n            node_current = node_current.parent;\r\n        }\r\n    }\r\n\r\n    tree_insert(insert_node) {\r\n        let current_node = this.root;\r\n        let parent_node = null;\r\n\r\n        if (this.root == null || this.root == nil_node) {\r\n            this.root = insert_node;\r\n        }\r\n        else {\r\n            while (current_node != nil_node) {\r\n                parent_node = current_node;\r\n                if (insert_node.less_than(current_node)) {\r\n                    current_node = current_node.left;\r\n                }\r\n                else {\r\n                    current_node = current_node.right;\r\n                }\r\n            }\r\n\r\n            insert_node.parent = parent_node;\r\n\r\n            if (insert_node.less_than(parent_node)) {\r\n                parent_node.left = insert_node;\r\n            }\r\n            else {\r\n                parent_node.right = insert_node;\r\n            }\r\n        }\r\n\r\n        this.insert_fixup(insert_node);\r\n    }\r\n\r\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\r\n// Go upwords to the root and re-color until violation will be resolved\r\n    insert_fixup(insert_node) {\r\n        let current_node;\r\n        let uncle_node;\r\n\r\n        current_node = insert_node;\r\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\r\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\r\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {                                                    // Case 2 & 3. Uncle is black\r\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\r\n                        // This case is transformed into Case 3.\r\n                        current_node = current_node.parent;\r\n                        this.rotate_left(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\r\n                    // Re-color father and grandfather, rotate grandfather right\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_right(current_node.parent.parent);\r\n                }\r\n            }\r\n            else {                                                         // parent is right child of grandfather\r\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {\r\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\r\n                        // Transform into case 6\r\n                        current_node = current_node.parent;\r\n                        this.rotate_right(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\r\n                    // Re-color father and grandfather, rotate grandfather left\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_left(current_node.parent.parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.root.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_delete(delete_node) {\r\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\r\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\r\n\r\n        if (delete_node.left == nil_node || delete_node.right == nil_node) {  // delete_node has less then 2 children\r\n            cut_node = delete_node;\r\n        }\r\n        else {                                                    // delete_node has 2 children\r\n            cut_node = this.tree_successor(delete_node);\r\n        }\r\n\r\n        // fix_node if single child of cut_node\r\n        if (cut_node.left != nil_node) {\r\n            fix_node = cut_node.left;\r\n        }\r\n        else {\r\n            fix_node = cut_node.right;\r\n        }\r\n\r\n        // remove cut_node from parent\r\n        /*if (fix_node != nil_node) {*/\r\n            fix_node.parent = cut_node.parent;\r\n        /*}*/\r\n\r\n        if (cut_node == this.root) {\r\n            this.root = fix_node;\r\n        }\r\n        else {\r\n            if (cut_node == cut_node.parent.left) {\r\n                cut_node.parent.left = fix_node;\r\n            }\r\n            else {\r\n                cut_node.parent.right = fix_node;\r\n            }\r\n            cut_node.parent.update_max();        // update max property of the parent\r\n        }\r\n\r\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\r\n\r\n        // COPY DATA !!!\r\n        // Delete_node becomes cut_node, it means that we cannot hold reference\r\n        // to node in outer structure and we will have to delete by key, additional search need\r\n        if (cut_node != delete_node) {\r\n            delete_node.copy_data(cut_node);\r\n            delete_node.update_max();           // update max property of the cut node at the new place\r\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\r\n        }\r\n\r\n        if (/*fix_node != nil_node && */cut_node.color == RB_TREE_COLOR_BLACK) {\r\n            this.delete_fixup(fix_node);\r\n        }\r\n    }\r\n\r\n    delete_fixup(fix_node) {\r\n        let current_node = fix_node;\r\n        let brother_node;\r\n\r\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\r\n            if (current_node == current_node.parent.left) {          // fix node is left child\r\n                brother_node = current_node.parent.right;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_left(current_node.parent);\r\n                    brother_node = current_node.parent.right;                      // update brother\r\n                }\r\n                // Derive to cases 2..4: brother is black\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\r\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\r\n                    current_node = current_node.parent;                  // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\r\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\r\n                        this.rotate_right(brother_node);\r\n                        brother_node = current_node.parent.right;                     // update brother\r\n                        // Derive to case 4: left nephew black, right nephew red\r\n                    }\r\n                    // case 4: left nephew black, right nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_left(current_node.parent);\r\n                    current_node = this.root;                         // exit from loop\r\n                }\r\n            }\r\n            else {                                             // fix node is right child\r\n                brother_node = current_node.parent.left;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_right(current_node.parent);\r\n                    brother_node = current_node.parent.left;                        // update brother\r\n                }\r\n                // Go to cases 2..4\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\r\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\r\n                    current_node = current_node.parent;                              // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\r\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\r\n                        this.rotate_left(brother_node);\r\n                        brother_node = current_node.parent.left;                        // update brother\r\n                        // Derive to case 4: right nephew black, left nephew red\r\n                    }\r\n                    // case 4: right nephew black, left nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_right(current_node.parent);\r\n                    current_node = this.root;                               // force exit from loop\r\n                }\r\n            }\r\n        }\r\n\r\n        current_node.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_search(node, search_node) {\r\n        if (node == null || node == nil_node)\r\n            return undefined;\r\n\r\n        if (search_node.equal_to(node)) {\r\n            return node;\r\n        }\r\n        if (search_node.less_than(node)) {\r\n            return this.tree_search(node.left, search_node);\r\n        }\r\n        else {\r\n            return this.tree_search(node.right, search_node);\r\n        }\r\n    }\r\n\r\n    // Original search_interval method; container res support push() insertion\r\n    // Search all intervals intersecting given one\r\n    tree_search_interval(node, search_node, res) {\r\n        if (node != null && node != nil_node) {\r\n            // if (node->left != nil_node && node->left->max >= low) {\r\n            if (node.left != nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                this.tree_search_interval(node.left, search_node, res);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (node.intersect(search_node)) {\r\n                res.push(node);\r\n            }\r\n            // if (node->right != nil_node && node->low <= high) {\r\n            if (node.right != nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                this.tree_search_interval(node.right, search_node, res);\r\n            }\r\n        }\r\n    }\r\n\r\n    local_minimum(node) {\r\n        let node_min = node;\r\n        while (node_min.left != null && node_min.left != nil_node) {\r\n            node_min = node_min.left;\r\n        }\r\n        return node_min;\r\n    }\r\n\r\n    // not in use\r\n    local_maximum(node) {\r\n        let node_max = node;\r\n        while (node_max.right != null && node_max.right != nil_node) {\r\n            node_max = node_max.right;\r\n        }\r\n        return node_max;\r\n    }\r\n\r\n    tree_successor(node) {\r\n        let node_successor;\r\n        let current_node;\r\n        let parent_node;\r\n\r\n        if (node.right != nil_node) {\r\n            node_successor = this.local_minimum(node.right);\r\n        }\r\n        else {\r\n            current_node = node;\r\n            parent_node = node.parent;\r\n            while (parent_node != null && parent_node.right == current_node) {\r\n                current_node = parent_node;\r\n                parent_node = parent_node.parent;\r\n            }\r\n            node_successor = parent_node;\r\n        }\r\n        return node_successor;\r\n    }\r\n\r\n    //           |            right-rotate(T,y)       |\r\n    //           y            ---------------.       x\r\n    //          / \\                                  / \\\r\n    //         x   c          left-rotate(T,x)      a   y\r\n    //        / \\             <---------------         / \\\r\n    //       a   b                                    b   c\r\n\r\n    rotate_left(x) {\r\n        let y = x.right;\r\n\r\n        x.right = y.left;           // b goes to x.right\r\n\r\n        if (y.left != nil_node) {\r\n            y.left.parent = x;     // x becomes parent of b\r\n        }\r\n        y.parent = x.parent;       // move parent\r\n\r\n        if (x == this.root) {\r\n            this.root = y;           // y becomes root\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (x == x.parent.left) {\r\n                x.parent.left = y;\r\n            }\r\n            else {\r\n                x.parent.right = y;\r\n            }\r\n        }\r\n        y.left = x;                 // x becomes left child of y\r\n        x.parent = y;               // and y becomes parent of x\r\n\r\n        if (x != null && x != nil_node) {\r\n            x.update_max();\r\n        }\r\n\r\n        y = x.parent;\r\n        if (y != null && y != nil_node) {\r\n            y.update_max();\r\n        }\r\n    }\r\n\r\n    rotate_right(y) {\r\n        let x = y.left;\r\n\r\n        y.left = x.right;           // b goes to y.left\r\n\r\n        if (x.right != nil_node) {\r\n            x.right.parent = y;        // y becomes parent of b\r\n        }\r\n        x.parent = y.parent;          // move parent\r\n\r\n        if (y == this.root) {        // x becomes root\r\n            this.root = x;\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (y == y.parent.left) {\r\n                y.parent.left = x;\r\n            }\r\n            else {\r\n                y.parent.right = x;\r\n            }\r\n        }\r\n        x.right = y;                 // y becomes right child of x\r\n        y.parent = x;               // and x becomes parent of y\r\n\r\n        if (y != null && y != nil_node) {\r\n            y.update_max();\r\n        }\r\n\r\n        x = y.parent;\r\n        if (x != null && x != nil_node) {\r\n            x.update_max();\r\n        }\r\n    }\r\n\r\n    tree_walk(node, action) {\r\n        if (node != null && node != nil_node) {\r\n            this.tree_walk(node.left, action);\r\n            // arr.push(node.output());\r\n            action(node);\r\n            this.tree_walk(node.right, action);\r\n        }\r\n    }\r\n\r\n    /* Return true if all red nodes have exactly two black child nodes */\r\n    testRedBlackProperty() {\r\n        let res = true;\r\n        this.tree_walk(this.root, function (node) {\r\n            if (node.color == RB_TREE_COLOR_RED) {\r\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\r\n                    res = false;\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /* Throw error if not every path from root to bottom has same black height */\r\n    testBlackHeightProperty(node) {\r\n        let height = 0;\r\n        let heightLeft = 0;\r\n        let heightRight = 0;\r\n        if (node.color == RB_TREE_COLOR_BLACK) {\r\n            height++;\r\n        }\r\n        if (node.left != nil_node) {\r\n            heightLeft = this.testBlackHeightProperty(node.left);\r\n        }\r\n        else {\r\n            heightLeft = 1;\r\n        }\r\n        if (node.right != nil_node) {\r\n            heightRight = this.testBlackHeightProperty(node.right);\r\n        }\r\n        else {\r\n            heightRight = 1;\r\n        }\r\n        if (heightLeft != heightRight) {\r\n            throw new Error('Red-black height property violated');\r\n        }\r\n        height += heightLeft;\r\n        return height;\r\n    };\r\n};\r\n\r\nmodule.exports = IntervalTree;\r\n","/**\r\n * Created by Alex Bol on 3/28/2017.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n    RB_TREE_COLOR_RED: 0,\r\n    RB_TREE_COLOR_BLACK: 1\r\n};","/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n'use strict';\r\n\r\nlet Utils = require(\"./utils/utils\");\r\nlet Errors = require(\"./utils/errors\");\r\n\r\n/**\r\n * FlattenJS - library for 2d geometry\r\n * @type {Flatten}\r\n */\r\nlet Flatten = class Flatten {\r\n    constructor() {\r\n        this.DP_TOL = Utils.DP_TOL;\r\n        this.CCW = true;\r\n        this.CW = false;\r\n        this.ORIENTATION = {CCW:-1, CW:1, NOT_ORIENTABLE: 0};\r\n        this.PIx2 = 2 * Math.PI;\r\n        // this.PI_2 = 0.5 * Math.PI;\r\n        this.INSIDE = 1;\r\n        this.OUTSIDE = 0;\r\n        this.BOUNDARY = 2;\r\n        this.CONTAINS = 3;\r\n        this.INTERLACE = 4;\r\n        this.OVERLAP_SAME = 1;\r\n        this.OVERLAP_OPPOSITE = 2;\r\n        this.Utils = Utils;\r\n        this.Errors = Errors;\r\n    }\r\n};\r\n\r\nlet f = new Flatten();\r\n\r\nrequire(\"./classes/matrix\")(f);\r\nrequire(\"./data_structures/planar_set\")(f);\r\nrequire(\"./classes/point\")(f);\r\nrequire(\"./classes/vector\")(f);\r\nrequire(\"./classes/line\")(f);\r\nrequire(\"./classes/circle\")(f);\r\nrequire(\"./classes/segment\")(f);\r\nrequire(\"./classes/arc\")(f);\r\nrequire(\"./classes/box\")(f);\r\nrequire(\"./classes/edge\")(f);\r\nrequire(\"./classes/face\")(f);\r\nrequire(\"./classes/ray\")(f);\r\nrequire(\"./algorithms/ray_shooting\")(f);\r\nrequire(\"./classes/polygon\")(f);\r\nrequire(\"./algorithms/distance\")(f);\r\n\r\nmodule.exports = f;\r\n","/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n/**\r\n * Global constant DP_TOL is used for comparison of floating point numbers.\r\n * It is set to 0.000001.\r\n * @type {number}\r\n */\r\nconst DP_TOL = 0.000001;\r\nconst DECIMALS = 3;\r\n\r\nmodule.exports = {\r\n    DP_TOL: DP_TOL,\r\n    /**\r\n     * Returns *true* if value comparable to zero\r\n     * @return {boolean}\r\n     */\r\n    EQ_0: function(x) {\r\n        return ( (x) < DP_TOL && (x) > -DP_TOL );\r\n    },\r\n    /**\r\n     * Returns *true* if two values are equal up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    EQ: function(x,y) {\r\n        return ( (x)-(y) <  DP_TOL && (x)-(y) > -DP_TOL );\r\n    },\r\n    /**\r\n     * Returns *true* if first argument greater than second argument up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    GT: (x,y) => {\r\n        return ( (x)-(y) >  DP_TOL );\r\n    },\r\n    /**\r\n     * Returns *true* if first argument greater than or equal to second argument up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    GE: (x,y) => {\r\n        return ( (x)-(y) > -DP_TOL );\r\n    },\r\n    /**\r\n     * Returns *true* if first argument less than second argument up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    LT: (x,y) => {\r\n        return ( (x)-(y) < -DP_TOL )\r\n    },\r\n    /**\r\n     * Returns *true* if first argument less than or equal to second argument up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    LE: (x,y) => {\r\n        return ( (x)-(y) <  DP_TOL );\r\n    }\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\nmodule.exports = {\r\n    ILLEGAL_PARAMETERS: new ReferenceError('Illegal Parameters'),\r\n    ZERO_DIVISION: new Error('Zero division')\r\n};\r\n\r\n","\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing an affine transformation 3x3 matrix:\r\n     * <pre>\r\n     *      [ a  c  tx\r\n     * A =    b  d  ty\r\n     *        0  0  1  ]\r\n     * </pre\r\n     * @type {Matrix}\r\n     */\r\n    Flatten.Matrix = class Matrix {\r\n        /**\r\n         * Construct new instance of affine transformation matrix <br/>\r\n         * If parameters omitted, construct identity matrix a = 1, d = 1\r\n         * @param {number} a - position(0,0)   sx*cos(alpha)\r\n         * @param {number} b - position (0,1)  sx*sin(alpha)\r\n         * @param {number} c - position (1,0)  -sy*sin(alpha)\r\n         * @param {number} d - position (1,1)  sy*cos(alpha)\r\n         * @param {number} tx - position (2,0) translation by x\r\n         * @param {number} ty - position (2,1) translation by y\r\n         */\r\n        constructor(a=1,b=0,c=0,d=1,tx=0,ty=0) {\r\n            this.a = a;\r\n            this.b = b;\r\n            this.c = c;\r\n            this.d = d;\r\n            this.tx = tx;\r\n            this.ty = ty;\r\n        }\r\n\r\n        /**\r\n         * Returns a clone of the Matrix instance.\r\n         * @return {Matrix}\r\n         **/\r\n        clone() {\r\n            return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\r\n        };\r\n\r\n        /**\r\n         * Transform vector [x,y] using transformation matrix. <br/>\r\n         * Vector [x,y] is an abstract array[2] of numbers and not a FlattenJS object <br/>\r\n         * The result is also an abstract vector [x',y'] = A * [x,y]:\r\n         * <code>\r\n         * [x'       [ ax + by + tx\r\n         *  y'   =     cx + dy + ty\r\n         *  1]                    1 ]\r\n         * </code>\r\n         * @param {number[]} vector - array[2] of numbers\r\n         * @returns {number[]} transformation result - array[2] of numbers\r\n         */\r\n        transform(vector) {\r\n            return [\r\n                vector[0]*this.a+vector[1]*this.c+this.tx,\r\n                vector[0]*this.b+vector[1]*this.d+this.ty\r\n            ]\r\n        };\r\n\r\n        /**\r\n         * Returns result of multiplication of this matrix by other matrix\r\n         * @param {Matrix} other_matrix - matrix to multiply by\r\n         * @returns {Matrix}\r\n         */\r\n        multiply(other_matrix) {\r\n            return new Matrix(\r\n                this.a*other_matrix.a + this.c*other_matrix.b,\r\n                this.b*other_matrix.a + this.d*other_matrix.b,\r\n                this.a*other_matrix.c + this.c*other_matrix.d,\r\n                this.b*other_matrix.c + this.d*other_matrix.d,\r\n                this.a*other_matrix.tx + this.c*other_matrix.ty + this.tx,\r\n                this.b*other_matrix.tx + this.d*other_matrix.ty + this.ty\r\n            )\r\n        };\r\n\r\n        /**\r\n         * Return new matrix as a result of multiplication of the current matrix\r\n         * by the matrix(1,0,0,1,tx,ty)\r\n         * @param {number} tx - translation by x\r\n         * @param {number} ty - translation by y\r\n         * @returns {Matrix}\r\n         */\r\n        translate(...args) {\r\n            let tx, ty;\r\n            if (args.length == 1 && (args[0] instanceof Flatten.Vector)) {\r\n                tx = args[0].x;\r\n                ty = args[0].y;\r\n            }\r\n            else if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                tx = args[0];\r\n                ty = args[1];\r\n            }\r\n            else {\r\n                throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n            }\r\n            return this.multiply(new Matrix(1,0,0,1,tx,ty))\r\n        };\r\n\r\n        /**\r\n         * Return new matrix as a result of multiplication of the current matrix\r\n         * by the matrix that defines rotation by given angle (in radians) around\r\n         * point (0,0) in counter clockwise direction\r\n         * @param angle\r\n         * @returns {Matrix}\r\n         */\r\n        rotate(angle) {\r\n            let cos = Math.cos(angle);\r\n            let sin = Math.sin(angle);\r\n            return this.multiply(new Matrix(cos,sin,-sin,cos,0,0));\r\n        };\r\n\r\n        /**\r\n         * Return new matrix as a result of multiplication of the current matrix\r\n         * by the matrix (sx,0,0,sy,0,0) that defines scaling\r\n         * @param sx\r\n         * @param sy\r\n         * @returns {Matrix}\r\n         */\r\n        scale(sx, sy) {\r\n            return this.multiply(new Matrix(sx,0,0,sy,0,0));\r\n        };\r\n\r\n        /**\r\n         * Returns true if two matrix are equal parameter by parameter\r\n         * @param {Matrix} matrix - other matrix\r\n         * @returns {boolean} true if equal, false otherwise\r\n         */\r\n        equalTo(matrix) {\r\n            if (!Flatten.Utils.EQ(this.tx, matrix.tx)) return false;\r\n            if (!Flatten.Utils.EQ(this.ty, matrix.ty)) return false;\r\n            if (!Flatten.Utils.EQ(this.a, matrix.a)) return false;\r\n            if (!Flatten.Utils.EQ(this.b, matrix.b)) return false;\r\n            if (!Flatten.Utils.EQ(this.c, matrix.c)) return false;\r\n            if (!Flatten.Utils.EQ(this.d, matrix.d)) return false;\r\n            return true;\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Function to create matrix equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.matrix = (...args) => new Flatten.Matrix(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 3/12/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\n// require(\"babel-polyfill\");\r\n\r\nlet IntervalTree = require('flatten-interval-tree');\r\n\r\nmodule.exports = function (Flatten) {\r\n    /**\r\n     * Class representing a planar set - a generic container with ability to keep and retrieve shapes and\r\n     * perform spatial queries. Planar set is an extension of Set container, so it supports\r\n     * Set properties and methods\r\n     */\r\n    Flatten.PlanarSet = class PlanarSet extends Set {\r\n        /**\r\n         * Create new empty instance of PlanarSet\r\n         */\r\n        constructor() {\r\n            super();\r\n            this.index = new IntervalTree();\r\n        }\r\n\r\n        /**\r\n         * Add new shape to planar set and to its spatial index.<br/>\r\n         * If shape already exist, it will not be added again.\r\n         * This happens with no error, it is possible to use <i>size</i> property to check if\r\n         * a shape was actually added.<br/>\r\n         * Method returns planar set object updated and may be chained\r\n         * @param {Shape} shape - shape to be added, should have valid <i>box</i> property\r\n         * @returns {PlanarSet}\r\n         */\r\n        add(shape) {\r\n            let size = this.size;\r\n            super.add(shape);\r\n            // size not changed - item not added, probably trying to add same item twice\r\n            if (this.size > size) {\r\n                let node = this.index.insert(shape.box, shape);\r\n            }\r\n            return this;         // in accordance to Set.add interface\r\n        }\r\n\r\n        /**\r\n         * Delete shape from planar set. Returns true if shape was actually deleted, false otherwise\r\n         * @param {Shape} shape - shape to be deleted\r\n         * @returns {boolean}\r\n         */\r\n        delete(shape) {\r\n            let deleted = super.delete(shape);\r\n            if (deleted) {\r\n                this.index.remove(shape.box, shape);\r\n            }\r\n            return deleted;\r\n        }\r\n\r\n        /**\r\n         * Clear planar set\r\n         */\r\n        clear() {\r\n            super.clear();\r\n            this.index = new IntervalTree();\r\n        }\r\n\r\n        /**\r\n         * 2d range search in planar set.<br/>\r\n         * Returns array of all shapes in planar set which bounding box is intersected with query box\r\n         * @param {Box} box - query box\r\n         * @returns {Shapes[]}\r\n         */\r\n        search(box) {\r\n            let resp = this.index.search(box);\r\n            return resp;\r\n        }\r\n\r\n        /**\r\n         * Point location test. Returns array of shapes which contains given point\r\n         * @param {Point} point - query point\r\n         * @returns {Array}\r\n         */\r\n        hit(point) {\r\n            let box = new Flatten.Box(point.x - 1, point.y - 1, point.x + 1, point.y + 1);\r\n            let resp = this.index.search(box);\r\n            return resp.filter((shape) => point.on(shape));\r\n        }\r\n\r\n        /**\r\n         * Returns svg string to draw all shapes in planar set\r\n         * @returns {String}\r\n         */\r\n        svg() {\r\n            let svgcontent = [...this].reduce((acc, shape) => acc + shape.svg(), \"\");\r\n            return svgcontent;\r\n        }\r\n    }\r\n};\r\n\r\n","/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n'use strict';\r\n\r\n// let defaultTraits = require('../utils/numeric_traits');\r\nlet Interval = require('../classes/interval');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('../utils/constants');\r\n\r\nlet Node = class Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be       instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    less_than(other_node) {\r\n        return this.item.key.less_than(other_node.item.key);\r\n    }\r\n\r\n    equal_to(other_node) {\r\n        let value_equal = true;\r\n        if (this.item.value && other_node.item.value) {\r\n            value_equal = this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n                this.item.value == other_node.item.value;\r\n        }\r\n        return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key.clone();\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let high = this.left.max.high ? this.left.max.high : this.left.max;\r\n        return val_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let low = this.right.max.low ? this.right.max.low : this.right.item.key.low;\r\n        return val_less_than(search_node.item.key.high, low);\r\n    }\r\n};\r\n\r\nmodule.exports = Node;\r\n\r\n","/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\nlet Interval = class Interval {\r\n    constructor(low, high) {\r\n        this.low = low;\r\n        this.high = high;\r\n    }\r\n\r\n    get max() {\r\n        return this.high;\r\n    }\r\n\r\n    interval(low, high) {\r\n        return new Interval(low, high);\r\n    }\r\n\r\n    clone() {\r\n        return new Interval(this.low, this.high);\r\n    }\r\n\r\n    less_than(other_interval) {\r\n        return this.low < other_interval.low ||\r\n            this.low == other_interval.low && this.high < other_interval.high;\r\n    }\r\n\r\n    equal_to(other_interval) {\r\n        return this.low == other_interval.low && this.high == other_interval.high;\r\n    }\r\n\r\n    intersect(other_interval) {\r\n        return !this.not_intersect(other_interval);\r\n    }\r\n\r\n    not_intersect(other_interval) {\r\n        return (this.high < other_interval.low || other_interval.high < this.low);\r\n    }\r\n\r\n    output() {\r\n        return [this.low, this.high];\r\n    }\r\n\r\n    maximal_val(val1, val2) {\r\n        return Math.max(val1, val2);\r\n    }\r\n\r\n    val_less_than(val1, val2 ) {     // trait to compare max property with item ?\r\n        return val1 < val2;\r\n    }\r\n};\r\n\r\nmodule.exports = Interval;\r\n","/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n/**\r\n *\r\n * @param Flatten\r\n */\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     *\r\n     * Class representing a point\r\n     * @type {Point}\r\n     */\r\n    Flatten.Point = class Point {\r\n        /**\r\n         * Point may be constructed by two numbers, or by array of two numbers\r\n         * @param {number} x - x-coordinate (float number)\r\n         * @param {number} y - y-coordinate (float number)\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * x-coordinate (float number)\r\n             * @type {number}\r\n             */\r\n            this.x = 0;\r\n            /**\r\n             * y-coordinate (float number)\r\n             * @type {number}\r\n             */\r\n            this.y = 0;\r\n\r\n            if (args.length === 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\r\n                let arr = args[0];\r\n                if (typeof(arr[0]) == \"number\" && typeof(arr[1]) == \"number\") {\r\n                    this.x = arr[0];\r\n                    this.y = arr[1];\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (args.length === 1 && args[0] instanceof Object && args[0].name === \"point\") {\r\n                let {x, y} = args[0];\r\n                this.x = x;\r\n                this.y = y;\r\n                return;\r\n            }\r\n\r\n            if (args.length === 2) {\r\n                if (typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                    this.x = args[0];\r\n                    this.y = args[1];\r\n                    return;\r\n                }\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns bounding box of a point\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return new Flatten.Box(this.x, this.y, this.x, this.y);\r\n        }\r\n\r\n        /**\r\n         * Method clone returns new copied instance of point\r\n         * @returns {Point}\r\n         */\r\n        clone() {\r\n            return new Flatten.Point(this.x, this.y);\r\n        }\r\n\r\n        get vertices() {\r\n            return [this.clone()];\r\n        }\r\n\r\n        /**\r\n         * Returns true if points are equal up to [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        equalTo(pt) {\r\n            return Flatten.Utils.EQ(this.x, pt.x) && Flatten.Utils.EQ(this.y, pt.y);\r\n        }\r\n\r\n        /**\r\n         * Defines predicate \"less than\" between points. Returns true if the point is less than query points, false otherwise <br/>\r\n         * By definition point1 < point2 if {point1.y < point2.y || point1.y == point2.y && point1.x < point2.y <br/>\r\n         * Numeric values compared with [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        lessThan(pt) {\r\n            if (Flatten.Utils.LT(this.y, pt.y))\r\n                return true;\r\n            if (Flatten.Utils.EQ(this.y, pt.y) && Flatten.Utils.LT(this.x, pt.x))\r\n                return true;\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Returns new point rotated by given angle around given center point.\r\n         * If center point is omitted, rotates around zero point (0,0).\r\n         * Positive value of angle defines rotation in counter clockwise direction,\r\n         * negative angle defines rotation in clockwise clockwise direction\r\n         * @param {number} angle - angle in radians\r\n         * @param {Point} [center=(0,0)] center\r\n         * @returns {Point}\r\n         */\r\n        rotate(angle, center = {x:0, y:0}) {\r\n            var x_rot = center.x + (this.x - center.x) * Math.cos(angle) - (this.y - center.y) * Math.sin(angle);\r\n            var y_rot = center.y + (this.x - center.x) * Math.sin(angle) + (this.y - center.y) * Math.cos(angle);\r\n\r\n            return new Flatten.Point(x_rot, y_rot);\r\n        }\r\n\r\n        /**\r\n         * Returns new point translated by given vector.\r\n         * Translation vector may by also defined by a pair of numbers.\r\n         * @param {Vector} vector - Translation vector defined as Flatten.Vector or\r\n         * @param {number|number} - Translation vector defined as pair of numbers\r\n         * @returns {Point}\r\n         */\r\n        translate(...args) {\r\n            if (args.length == 1 && (args[0] instanceof Flatten.Vector)) {\r\n                return new Flatten.Point(this.x + args[0].x, this.y + args[0].y);\r\n            }\r\n\r\n            if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                return new Flatten.Point(this.x + args[0], this.y + args[1]);\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Return new point transformed by affine transformation matrix m\r\n         * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\r\n         * @returns {Point}\r\n         */\r\n        transform(m) {\r\n            // let [x,y] = m.transform([this.x,this.y]);\r\n            return new Flatten.Point(m.transform([this.x,this.y]))\r\n        }\r\n\r\n        /**\r\n         * Returns projection point on given line\r\n         * @param {Line} line Line this point be projected on\r\n         * @returns {Point}\r\n         */\r\n        projectionOn(line) {\r\n            if (this.equalTo(line.pt))                   // this point equal to line anchor point\r\n                return this.clone();\r\n\r\n            let vec = new Flatten.Vector(this, line.pt);\r\n            if (Flatten.Utils.EQ_0(vec.cross(line.norm)))    // vector to point from anchor point collinear to normal vector\r\n                return line.pt.clone();\r\n\r\n            let dist = vec.dot(line.norm);             // signed distance\r\n            let proj_vec = line.norm.multiply(dist);\r\n            return this.translate(proj_vec);\r\n        }\r\n\r\n        /**\r\n         * Returns true if point belongs to the \"left\" semi-plane, which means, point belongs to the same semi plane where line normal vector points to\r\n         * Return false if point belongs to the \"right\" semi-plane or to the line itself\r\n         * @param {Line} line Query line\r\n         * @returns {boolean}\r\n         */\r\n        leftTo(line) {\r\n            let vec = new Flatten.Vector(line.pt, this);\r\n            let onLeftSemiPlane = Flatten.Utils.GT(vec.dot(line.norm), 0);\r\n            return onLeftSemiPlane;\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from point to shape and return as array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from point to shape\r\n         * @returns {Segment} shortest segment between point and shape (started at point, ended at shape)\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Point) {\r\n                let dx = shape.x - this.x;\r\n                let dy = shape.y - this.y;\r\n                return [Math.sqrt(dx*dx + dy*dy), new Flatten.Segment(this, shape)];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return Distance.point2line(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Distance.point2circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return Distance.point2segment(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                // let [dist, ...rest] = Distance.point2arc(this, shape);\r\n                // return dist;\r\n                return Distance.point2arc(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                // let [dist, ...rest] = Distance.point2polygon(this, shape);\r\n                // return dist;\r\n                return Distance.point2polygon(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                return Distance.shape2planarSet(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns true if point is on a shape, false otherwise\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon\r\n         * @returns {boolean}\r\n         */\r\n        on(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.equalTo(shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof  Flatten.Segment) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return shape.contains(this);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return string to draw point in svg as circle with radius \"r\" <br/>\r\n         * Accept any valid attributes of svg elements as svg object\r\n         * Defaults attribues are: <br/>\r\n         * {\r\n         *    r:\"3\",\r\n         *    stroke:\"black\",\r\n         *    strokeWidth:\"1\",\r\n         *    fill:\"red\"\r\n         * }\r\n         * @param {Object} attrs - Any valid attributes of svg circle element, like \"r\", \"stroke\", \"strokeWidth\", \"fill\"\r\n         * @returns {String}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {r, stroke, strokeWidth, fill, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n            return `\\n<circle cx=\"${this.x}\" cy=\"${this.y}\" r=\"${r || 3}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"red\"}\" ${id_str} ${class_str} />`;\r\n        }\r\n\r\n        /**\r\n         * This method returns an object that defines how data will be\r\n         * serialized when called JSON.stringify() method\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"point\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create point equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.point = (...args) => new Flatten.Point(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing a vector\r\n     * @type {Vector}\r\n     */\r\n    Flatten.Vector = class Vector {\r\n        /**\r\n         * Vector may be constructed by two points, or by two float numbers,\r\n         * or by array of two numbers\r\n         * @param {Point} ps - start point\r\n         * @param {Point} pe - end point\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * x-coordinate of a vector (float number)\r\n             * @type {number}\r\n             */\r\n            this.x = 0;\r\n            /**\r\n             * y-coordinate of a vector (float number)\r\n             * @type {number}\r\n             */\r\n            this.y = 0;\r\n\r\n            /* return zero vector */\r\n            if (args.length === 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\r\n                let arr = args[0];\r\n                if (typeof(arr[0]) == \"number\" && typeof(arr[1]) == \"number\") {\r\n                    this.x = arr[0];\r\n                    this.y = arr[1];\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (args.length === 1 && args[0] instanceof Object && args[0].name === \"vector\") {\r\n                let {x, y} = args[0];\r\n                this.x = x;\r\n                this.y = y;\r\n                return;\r\n            }\r\n\r\n            if (args.length === 2) {\r\n                let a1 = args[0];\r\n                let a2 = args[1];\r\n\r\n                if (typeof(a1) == \"number\" && typeof(a2) == \"number\") {\r\n                    this.x = a1;\r\n                    this.y = a2;\r\n                    return;\r\n                }\r\n\r\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                    this.x = a2.x - a1.x;\r\n                    this.y = a2.y - a1.y;\r\n                    return;\r\n                }\r\n\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Method clone returns new instance of Vector\r\n         * @returns {Vector}\r\n         */\r\n        clone() {\r\n            return new Vector(this.x, this.y);\r\n        }\r\n\r\n        /**\r\n         * Slope of the vector in radians from 0 to 2PI\r\n         * @returns {number}\r\n         */\r\n        get slope() {\r\n            let angle = Math.atan2(this.y, this.x);\r\n            if (angle<0) angle = 2*Math.PI + angle;\r\n            return angle;\r\n        }\r\n\r\n        /**\r\n         * Length of vector\r\n         * @returns {number}\r\n         */\r\n        get length() {\r\n            return Math.sqrt(this.dot(this));\r\n        }\r\n\r\n        /**\r\n         * Returns true if vectors are equal up to [DP_TOL]{@link http://localhost:63342/flatten-js/docs/global.html#DP_TOL}\r\n         * tolerance\r\n         * @param {Vector} v\r\n         * @returns {boolean}\r\n         */\r\n        equalTo(v) {\r\n            return Flatten.Utils.EQ(this.x, v.x) && Flatten.Utils.EQ(this.y, v.y);\r\n        }\r\n\r\n        /**\r\n         * Returns new vector multiplied by scalar\r\n         * @param {number} scalar\r\n         * @returns {Vector}\r\n         */\r\n        multiply(scalar) {\r\n            return ( new Vector(scalar * this.x, scalar * this.y) );\r\n        }\r\n\r\n        /**\r\n         * Returns scalar product (dot product) of two vectors <br/>\r\n         * <code>dot_product = (this * v)</code>\r\n         * @param {Vector} v Other vector\r\n         * @returns {number}\r\n         */\r\n        dot(v) {\r\n            return ( this.x * v.x + this.y * v.y );\r\n        }\r\n\r\n        /**\r\n         * Returns vector product (cross product) of two vectors <br/>\r\n         * <code>cross_product = (this x v)</code>\r\n         * @param {Vector} v Other vector\r\n         * @returns {number}\r\n         */\r\n        cross(v) {\r\n            return ( this.x * v.y - this.y * v.x );\r\n        }\r\n\r\n        /**\r\n         * Returns unit vector.<br/>\r\n         * Throw error if given vector has zero length\r\n         * @returns {Vector}\r\n         */\r\n        normalize() {\r\n            if (!Flatten.Utils.EQ_0(this.length)) {\r\n                return ( new Vector(this.x / this.length, this.y / this.length) );\r\n            }\r\n            throw Flatten.Errors.ZERO_DIVISION;\r\n        }\r\n\r\n        /**\r\n         * Returns new vector rotated by given angle,\r\n         * positive angle defines rotation in counter clockwise direction,\r\n         * negative - in clockwise direction\r\n         * @param {number} angle - Angle in radians\r\n         * @returns {Vector}\r\n         */\r\n        rotate(angle) {\r\n            let point = new Flatten.Point(this.x, this.y);\r\n            let rpoint = point.rotate(angle);\r\n            return new Flatten.Vector(rpoint.x, rpoint.y);\r\n        }\r\n\r\n        /**\r\n         * Returns vector rotated 90 degrees counter clockwise\r\n         * @returns {Vector}\r\n         */\r\n        rotate90CCW() {\r\n            return new Flatten.Vector(-this.y, this.x);\r\n        };\r\n\r\n        /**\r\n         * Returns vector rotated 90 degrees clockwise\r\n         * @returns {Vector}\r\n         */\r\n        rotate90CW() {\r\n            return new Flatten.Vector(this.y, -this.x);\r\n        };\r\n\r\n        /**\r\n         * Return inverted vector\r\n         * @returns {Vector}\r\n         */\r\n        invert() {\r\n            return new Flatten.Vector(-this.x, -this.y);\r\n        }\r\n\r\n        /**\r\n         * Return result of addition of other vector to this vector as a new vector\r\n         * @param {Vector} v Other vector\r\n         * @returns {Vector}\r\n         */\r\n        add(v) {\r\n            return new Flatten.Vector(this.x + v.x, this.y + v.y);\r\n        }\r\n\r\n        /**\r\n         * Return result of subtraction of other vector from current vector as a new vector\r\n         * @param {Vector} v Another vector\r\n         * @returns {Vector}\r\n         */\r\n        subtract(v) {\r\n            return new Flatten.Vector(this.x - v.x, this.y - v.y);\r\n        }\r\n\r\n        /**\r\n         * Return angle between this vector and other vector. <br/>\r\n         * Angle is measured from 0 to 2*PI in the counter clockwise direction\r\n         * from current vector to other.\r\n         * @param {Vector} v Another vector\r\n         * @returns {number}\r\n         */\r\n        angleTo(v) {\r\n            let norm1 = this.normalize();\r\n            let norm2 = v.normalize();\r\n            let angle = Math.atan2(norm1.cross(norm2), norm1.dot(norm2));\r\n            if (angle<0) angle += 2*Math.PI;\r\n            return angle;\r\n        }\r\n\r\n        /**\r\n         * Return vector projection of the current vector on another vector\r\n         * @param {Vector} v Another vector\r\n         * @returns {Vector}\r\n         */\r\n        projectionOn(v){\r\n            let n = v.normalize();\r\n            let d = this.dot(n);\r\n            return n.multiply(d);\r\n        }\r\n\r\n        /**\r\n         * This method returns an object that defines how data will be\r\n         * serialized when called JSON.stringify() method\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"vector\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create vector equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.vector = (...args) => new Flatten.Vector(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/20/2017.\r\n */\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing a line\r\n     * @type {Line}\r\n     */\r\n    Flatten.Line = class Line {\r\n        /**\r\n         * Line may be constructed by point and normal vector or by two points that a line passes through\r\n         * @param {Point} pt - point that a line passes through\r\n         * @param {Vector|Point} norm - normal vector to a line or second point a line passes through\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Point a line passes through\r\n             * @type {Point}\r\n             */\r\n            this.pt = new Flatten.Point();\r\n            /**\r\n             * Normal vector to a line <br/>\r\n             * Vector is normalized (length == 1)\r\n             * @type {Vector}\r\n             */\r\n            this.norm = new Flatten.Vector(0,1);\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Object && args[0].name === \"line\") {\r\n                let {pt, norm} = args[0];\r\n                this.pt = new Flatten.Point(pt);\r\n                this.norm = new Flatten.Vector(norm);\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2) {\r\n                let a1 = args[0];\r\n                let a2 = args[1];\r\n\r\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                    this.pt = a1;\r\n                    this.norm = Line.points2norm(a1, a2);\r\n                    return;\r\n                }\r\n\r\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Vector) {\r\n                    if (Flatten.Utils.EQ_0(a2.x) && Flatten.Utils.EQ_0(a2.y)) {\r\n                        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n                    }\r\n                    this.pt = a1.clone();\r\n                    this.norm = a2.clone();\r\n                    this.norm = this.norm.normalize();\r\n                    return;\r\n                }\r\n\r\n                if (a1 instanceof Flatten.Vector && a2 instanceof Flatten.Point) {\r\n                    if (Flatten.Utils.EQ_0(a1.x) && Flatten.Utils.EQ_0(a1.y)) {\r\n                        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n                    }\r\n                    this.pt = a2.clone();\r\n                    this.norm = a1.clone();\r\n                    this.norm = this.norm.normalize();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Returns cloned new instance of a line\r\n         * @returns {Line}\r\n         */\r\n        clone() {\r\n            return new Flatten.Line(this.pt, this.norm);\r\n        }\r\n\r\n        /**\r\n         * Slope of the line - angle in radians between line and axe x from 0 to 2PI\r\n         * @returns {number} - slope of the line\r\n         */\r\n        get slope() {\r\n            let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\r\n            return vec.slope;\r\n        }\r\n\r\n        /**\r\n         * Get coefficients [A,B,C] of a standard line equation in the form Ax + By = C\r\n         * @code [A, B, C] = line.standard\r\n         * @returns {number[]} - array of coefficients\r\n         */\r\n        get standard() {\r\n            let A = this.norm.x;\r\n            let B = this.norm.y;\r\n            let C = this.norm.dot(this.pt);\r\n\r\n            return [A,B,C];\r\n        }\r\n\r\n        /**\r\n         * Return true if parallel or incident to other line\r\n         * @param {Line} other_line - line to check\r\n         * @returns {boolean}\r\n         */\r\n        parallelTo(other_line) {\r\n            return Flatten.Utils.EQ_0(this.norm.cross(other_line.norm));\r\n        }\r\n\r\n        /**\r\n         * Returns true if incident to other line\r\n         * @param {Line} other_line - line to check\r\n         * @returns {boolean}\r\n         */\r\n        incidentTo(other_line) {\r\n            return this.parallelTo(other_line) && this.pt.on(other_line);\r\n        }\r\n\r\n        /**\r\n         * Returns true if point belongs to line\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            if (this.pt.equalTo(pt)) {\r\n                return true;\r\n            }\r\n            /* Line contains point if vector to point is orthogonal to the line normal vector */\r\n            let vec = new Flatten.Vector(this.pt, pt);\r\n            return Flatten.Utils.EQ_0(this.norm.dot(vec));\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points\r\n         * @param {Shape} shape - shape to intersect with\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return Line.intersectLine2Line(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Line.intersectLine2Circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return shape.intersect(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return Line.intersectLine2Arc(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Flatten.Polygon.intersectLine2Polygon(this, shape);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from line to shape and returns array [distance, shortest_segment]\r\n         * @param {Shape} shape Shape of the one of the types Point, Circle, Segment, Arc, Polygon\r\n         * @returns {Number}\r\n         * @returns {Segment}\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [distance, shortest_segment] = Distance.point2line(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [distance, shortest_segment] = Distance.circle2line(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [distance, shortest_segment] = Distance.segment2line(shape, this);\r\n                return [distance, shortest_segment.reverse()];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [distance, shortest_segment] = Distance.arc2line(shape, this);\r\n                return [distance, shortest_segment.reverse()];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [distance, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return string to draw svg segment representing line inside given box\r\n         * @param {Box} box Box representing drawing area\r\n         * @param {Object} attrs - an object with attributes of svg circle element\r\n         */\r\n        svg(box, attrs = {}) {\r\n            let ip = Line.intersectLine2Box(this, box);\r\n            if (ip.length === 0)\r\n                return \"\";\r\n            let ps = ip[0];\r\n            let pe = ip.length == 2 ? ip[1] : ip.find( pt => !pt.equalTo(ps) );\r\n            if (pe === undefined) pe = ps;\r\n            let segment = new Flatten.Segment(ps, pe);\r\n            return segment.svg(attrs);\r\n        }\r\n\r\n        /**\r\n         * This method returns an object that defines how data will be\r\n         * serialized when called JSON.stringify() method\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"line\"});\r\n        }\r\n\r\n        static points2norm(pt1, pt2) {\r\n            if (pt1.equalTo(pt2)) {\r\n                throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n            }\r\n            let vec = new Flatten.Vector(pt1, pt2);\r\n            let unit = vec.normalize();\r\n            return unit.rotate90CCW();\r\n        }\r\n\r\n        static intersectLine2Line(line1, line2) {\r\n            let ip = [];\r\n\r\n            let [A1, B1, C1] = line1.standard;\r\n            let [A2, B2, C2] = line2.standard;\r\n\r\n            /* Cramer's rule */\r\n            let det = A1*B2 - B1*A2;\r\n            let detX = C1*B2 - B1*C2;\r\n            let detY = A1*C2 - C1*A2;\r\n\r\n            if (!Flatten.Utils.EQ_0(det)) {\r\n                let new_ip = new Flatten.Point( detX/det, detY/det );\r\n                ip.push(new_ip);\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        static intersectLine2Circle(line, circle) {\r\n            let ip = [];\r\n            let prj = circle.pc.projectionOn(line);            // projection of circle center on line\r\n            let dist = circle.pc.distanceTo(prj)[0];           // distance from circle center to projection\r\n\r\n            if (Flatten.Utils.EQ(dist, circle.r)) {            // line tangent to circle - return single intersection point\r\n                ip.push(prj);\r\n            }\r\n            else if (Flatten.Utils.LT(dist, circle.r)) {       // return two intersection points\r\n                let delta = Math.sqrt(circle.r*circle.r - dist*dist);\r\n                let v_trans, pt;\r\n\r\n                v_trans = line.norm.rotate90CCW().multiply(delta);\r\n                pt = prj.translate(v_trans);\r\n                ip.push(pt);\r\n\r\n                v_trans = line.norm.rotate90CW().multiply(delta);\r\n                pt = prj.translate(v_trans);\r\n                ip.push(pt);\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        static intersectLine2Box(line, box) {\r\n            let pts = [\r\n                new Flatten.Point(box.xmin, box.ymin),\r\n                new Flatten.Point(box.xmax, box.ymin),\r\n                new Flatten.Point(box.xmax, box.ymax),\r\n                new Flatten.Point(box.xmin, box.ymax)\r\n            ];\r\n            let segs = [\r\n                new Flatten.Segment(pts[0], pts[1]),\r\n                new Flatten.Segment(pts[1], pts[2]),\r\n                new Flatten.Segment(pts[2], pts[3]),\r\n                new Flatten.Segment(pts[3], pts[0])\r\n            ];\r\n\r\n            let ips =  [];\r\n\r\n            for(let seg of segs) {\r\n                let ips_tmp = seg.intersect(line);\r\n                for (let ip of ips_tmp) {\r\n                    ips.push(ip);\r\n                }\r\n            };\r\n            return ips;\r\n        }\r\n\r\n        static intersectLine2Arc(line, arc) {\r\n            let ip = [];\r\n\r\n            if (Line.intersectLine2Box(line, arc.box).length == 0) {\r\n                return ip;\r\n            }\r\n\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n            let ip_tmp = line.intersect(circle);\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(arc)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create line equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.line = (...args) => new Flatten.Line(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 3/6/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Arc,vector} = Flatten;\r\n    /**\r\n     * Class representing a circle\r\n     * @type {Circle}\r\n     */\r\n    Flatten.Circle = class Circle {\r\n        /**\r\n         *\r\n         * @param {Point} pc - circle center point\r\n         * @param {number} r - circle radius\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Circle center\r\n             * @type {Point}\r\n             */\r\n            this.pc = new Flatten.Point();\r\n            /**\r\n             * Circle radius\r\n             * @type {number}\r\n             */\r\n            this.r = 1;\r\n\r\n            if (args.length == 1 && args[0] instanceof Object && args[0].name === \"circle\") {\r\n                let {pc, r} = args[0];\r\n                this.pc = new Flatten.Point(pc);\r\n                this.r = r;\r\n                return;\r\n            }\r\n            else {\r\n                let [pc, r] = [...args];\r\n                if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\r\n                if (r !== undefined) this.r = r;\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Method clone returns new instance of a Circle\r\n         * @returns {Circle}\r\n         */\r\n        clone() {\r\n            return new Flatten.Circle(this.pc.clone(), this.r);\r\n        }\r\n\r\n        /**\r\n         * Circle center\r\n         * @returns {Point}\r\n         */\r\n        get center() {\r\n            return this.pc;\r\n        }\r\n\r\n        /**\r\n         * Circle bounding box\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return new Flatten.Box(\r\n                this.pc.x - this.r,\r\n                this.pc.y - this.r,\r\n                this.pc.x + this.r,\r\n                this.pc.y + this.r\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Return true if circle contains point\r\n         * @param {Point} pt - test point\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            return Flatten.Utils.LE(pt.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        /**\r\n         * Transform circle to closed arc\r\n         * @param {boolean} counterclockwise\r\n         * @returns {Arc}\r\n         */\r\n        toArc(counterclockwise=true) {\r\n            return new Flatten.Arc(this.center, this.r, Math.PI, -Math.PI, counterclockwise);\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between circle and other shape\r\n         * @param {Shape} shape Shape of the one of supported types\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n            if (shape instanceof Flatten.Line) {\r\n                return shape.intersect(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return shape.intersect(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Circle.intersectCirle2Circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return shape.intersect(this);\r\n            }\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Flatten.Polygon.intersectShape2Polygon(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from circle to shape and return array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from circle to shape\r\n         * @returns {Segment} shortest segment between circle and shape (started at circle, ended at shape)\r\n\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n            let {point2circle, circle2circle, circle2line, segment2circle, arc2circle} = Distance;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [distance, shortest_segment] = point2circle(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [distance, shortest_segment] = circle2circle(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                let [distance, shortest_segment] = circle2line(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [distance, shortest_segment] = segment2circle(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [distance, shortest_segment] = arc2circle(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [distance, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n        }\r\n\r\n        static intersectCirle2Circle(circle1, circle2) {\r\n            let ip = [];\r\n\r\n            if (circle1.box.not_intersect(circle2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let vec = new Flatten.Vector(circle1.pc, circle2.pc);\r\n\r\n            let r1 = circle1.r;\r\n            let r2 = circle2.r;\r\n\r\n            // Degenerated circle\r\n            if (Flatten.Utils.EQ_0(r1) || Flatten.Utils.EQ_0(r2))\r\n                return ip;\r\n\r\n            // In case of equal circles return one leftmost point\r\n            if (Flatten.Utils.EQ_0(vec.x) && Flatten.Utils.EQ_0(vec.y) && Flatten.Utils.EQ(r1, r2)) {\r\n                ip.push(circle1.pc.translate(-r1, 0));\r\n                return ip;\r\n            }\r\n\r\n            let dist = circle1.pc.distanceTo(circle2.pc)[0];\r\n\r\n            if (Flatten.Utils.GT(dist, r1 + r2))               // circles too far, no intersections\r\n                return ip;\r\n\r\n            if (Flatten.Utils.LT(dist, Math.abs(r1 - r2)))     // one circle is contained within another, no intersections\r\n                return ip;\r\n\r\n            // Normalize vector.\r\n            vec.x /= dist;\r\n            vec.y /= dist;\r\n\r\n            let pt;\r\n\r\n            // Case of touching from outside or from inside - single intersection point\r\n            // TODO: check this specifically not sure if correct\r\n            if (Flatten.Utils.EQ(dist, r1 + r2) || Flatten.Utils.EQ(dist, Math.abs(r1 - r2))) {\r\n                pt = circle1.pc.translate(r1*vec.x, r1*vec.y);\r\n                ip.push(pt);\r\n                return ip;\r\n            }\r\n\r\n            // Case of two intersection points\r\n\r\n            // Distance from first center to center of common chord:\r\n            //   a = (r1^2 - r2^2 + d^2) / 2d\r\n            // Separate for better accuracy\r\n            let a = (r1*r1)/(2*dist) - (r2*r2)/(2*dist) + dist/2;\r\n\r\n            let mid_pt = circle1.pc.translate(a*vec.x, a*vec.y);\r\n            let h = Math.sqrt(r1*r1 - a*a);\r\n            // let norm;\r\n\r\n            // norm = vec.rotate90CCW().multiply(h);\r\n            pt = mid_pt.translate(vec.rotate90CCW().multiply(h));\r\n            ip.push(pt);\r\n\r\n            // norm = vec.rotate90CW();\r\n            pt = mid_pt.translate(vec.rotate90CW().multiply(h));\r\n            ip.push(pt);\r\n\r\n            return ip;\r\n        }\r\n\r\n        /**\r\n         * Return string to draw circle in svg\r\n         * @param {Object} attrs - an object with attributes of svg circle element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {stroke, strokeWidth, fill, fillOpacity, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n            return `\\n<circle cx=\"${this.pc.x}\" cy=\"${this.pc.y}\" r=\"${this.r}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" fill-opacity=\"${fillOpacity || 1.0}\" ${id_str} ${class_str} />`;\r\n        }\r\n\r\n        /**\r\n         * This method returns an object that defines how data will be\r\n         * serialized when called JSON.stringify() method\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"circle\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shortcut to create new circle\r\n     * @param args\r\n     */\r\n    Flatten.circle = (...args) => new Flatten.Circle(...args);\r\n};","/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function (Flatten) {\r\n    /**\r\n     * Class representing a segment\r\n     * @type {Segment}\r\n     */\r\n    Flatten.Segment = class Segment {\r\n        /**\r\n         *\r\n         * @param {Point} ps - start point\r\n         * @param {Point} pe - end point\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Start point\r\n             * @type {Point}\r\n             */\r\n            this.ps = new Flatten.Point();\r\n            /**\r\n             * End Point\r\n             * @type {Point}\r\n             */\r\n            this.pe = new Flatten.Point();\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Array && args[0].length == 4) {\r\n                let coords = args[0];\r\n                this.ps = new Flatten.Point(coords[0], coords[1]);\r\n                this.pe = new Flatten.Point(coords[2], coords[3]);\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Object && args[0].name === \"segment\") {\r\n                let {ps,pe} = args[0];\r\n                this.ps = new Flatten.Point(ps.x, ps.y);\r\n                this.pe = new Flatten.Point(pe.x, pe.y);\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2 && args[0] instanceof Flatten.Point && args[1] instanceof Flatten.Point) {\r\n                this.ps = args[0].clone();\r\n                this.pe = args[1].clone();\r\n                return;\r\n            }\r\n\r\n            if (args.length == 4) {\r\n                this.ps = new Flatten.Point(args[0], args[1]);\r\n                this.pe = new Flatten.Point(args[2], args[3]);\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Method clone copies segment and returns a new instance\r\n         * @returns {Segment}\r\n         */\r\n        clone() {\r\n            return new Flatten.Segment(this.start, this.end);\r\n        }\r\n\r\n        /**\r\n         * Start point\r\n         * @returns {Point}\r\n         */\r\n        get start() {\r\n            return this.ps;\r\n        }\r\n\r\n        /**\r\n         * End point\r\n         * @returns {Point}\r\n         */\r\n        get end() {\r\n            return this.pe;\r\n        }\r\n\r\n\r\n        /**\r\n         * Returns array of start and end point\r\n         * @returns [Point,Point]\r\n         */\r\n        get vertices() {\r\n            return [this.ps.clone(), this.pe.clone()];\r\n        }\r\n\r\n        /**\r\n         * Length of a segment\r\n         * @returns {number}\r\n         */\r\n        get length() {\r\n            return this.start.distanceTo(this.end)[0];\r\n        }\r\n\r\n        /**\r\n         * Slope of the line - angle to axe x in radians from 0 to 2PI\r\n         * @returns {number}\r\n         */\r\n        get slope() {\r\n            let vec = new Flatten.Vector(this.start, this.end);\r\n            return vec.slope;\r\n        }\r\n\r\n        /**\r\n         * Bounding box\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return new Flatten.Box(\r\n                Math.min(this.start.x, this.end.x),\r\n                Math.min(this.start.y, this.end.y),\r\n                Math.max(this.start.x, this.end.x),\r\n                Math.max(this.start.y, this.end.y)\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Returns true if equals to query segment, false otherwise\r\n         * @param {Seg} seg - query segment\r\n         * @returns {boolean}\r\n         */\r\n        equalTo(seg) {\r\n            return this.ps.equalTo(seg.ps) && this.pe.equalTo(seg.pe);\r\n        }\r\n\r\n        /**\r\n         * Returns true if segment contains point\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            return Flatten.Utils.EQ_0(this.distanceToPoint(pt));\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between segment and other shape\r\n         * @param {Shape} shape - Shape of the one of supported types <br/>\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return Segment.intersectSegment2Line(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return Segment.intersectSegment2Segment(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Segment.intersectSegment2Circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return Segment.intersectSegment2Arc(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Flatten.Polygon.intersectShape2Polygon(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from segment to shape and return as array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from segment to shape\r\n         * @returns {Segment} shortest segment between segment and shape (started at segment, ended at shape)\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [dist, shortest_segment] = Distance.point2segment(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [dist, shortest_segment] = Distance.segment2circle(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                let [dist, shortest_segment] = Distance.segment2line(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [dist, shortest_segment] = Distance.segment2segment(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [dist, shortest_segment] = Distance.segment2arc(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [dist, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns unit vector in the direction from start to end\r\n         * @returns {Vector}\r\n         */\r\n        tangentInStart() {\r\n            let vec = new Flatten.Vector(this.start, this.end);\r\n            return vec.normalize();\r\n        }\r\n\r\n        /**\r\n         * Return unit vector in the direction from end to start\r\n         * @returns {Vector}\r\n         */\r\n        tangentInEnd() {\r\n            let vec = new Flatten.Vector(this.end, this.start);\r\n            return vec.normalize();\r\n        }\r\n\r\n        /**\r\n         * Returns new segment with swapped start and end points\r\n         * @returns {Segment}\r\n         */\r\n        reverse() {\r\n            return new Segment(this.end, this.start);\r\n        }\r\n\r\n        /**\r\n         * When point belongs to segment, return array of two segments split by given point,\r\n         * if point is inside segment. Returns clone of this segment if query point is incident\r\n         * to start or end point of the segment. Returns empty array if point does not belong to segment\r\n         * @param {Point} pt Query point\r\n         * @returns {Segment[]}\r\n         */\r\n        split(pt) {\r\n            if (!this.contains(pt))\r\n                return [];\r\n\r\n            if (this.start.equalTo(this.end))\r\n                return [this.clone()];\r\n\r\n            if (this.start.equalTo(pt) || this.end.equalTo(pt))\r\n                return [this];\r\n\r\n            return [\r\n                new Flatten.Segment(this.start, pt),\r\n                new Flatten.Segment(pt, this.end)\r\n            ]\r\n        }\r\n\r\n        /**\r\n         * Return middle point of the segment\r\n         * @returns {Point}\r\n         */\r\n        middle() {\r\n            return new Flatten.Point((this.start.x + this.end.x)/2, (this.start.y + this.end.y)/2);\r\n        }\r\n\r\n        distanceToPoint(pt) {\r\n            let [dist, ...rest] = Flatten.Distance.point2segment(pt, this);\r\n            return dist;\r\n        };\r\n\r\n        definiteIntegral(ymin = 0.0) {\r\n            let dx = this.end.x - this.start.x;\r\n            let dy1 = this.start.y - ymin;\r\n            let dy2 = this.end.y - ymin;\r\n            return ( dx * (dy1 + dy2) / 2 );\r\n        }\r\n\r\n        /**\r\n         * Returns new segment translated by vector vec\r\n         * @param {Vector} vec\r\n         * @returns {Segment}\r\n         */\r\n        translate(...args) {\r\n            return new Segment(this.ps.translate(...args), this.pe.translate(...args));\r\n        }\r\n\r\n        /**\r\n         * Return new segment rotated by given angle around given point\r\n         * If point omitted, rotate around origin (0,0)\r\n         * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n         * @param {number} angle - rotation angle in radians\r\n         * @param {Point} center - center point, default is (0,0)\r\n         * @returns {Segment}\r\n         */\r\n        rotate(angle = 0, center = new Flatten.Point()) {\r\n            let m = new Flatten.Matrix();\r\n            m = m.translate(center.x, center.y).rotate(angle).translate(-center.x, -center.y);\r\n            return this.transform(m);\r\n        }\r\n\r\n        /**\r\n         * Return new segment transformed using affine transformation matrix\r\n         * @param {Matrix} matrix - affine transformation matrix\r\n         * @returns {Segment} - transformed segment\r\n         */\r\n        transform(matrix = new Flatten.Matrix()) {\r\n            return new Segment(this.ps.transform(matrix), this.pe.transform(matrix))\r\n        }\r\n\r\n        /**\r\n         * Returns true if segment start is equal to segment end up to DP_TOL\r\n         * @returns {boolean}\r\n         */\r\n        isZeroLength() {\r\n            return this.ps.equalTo(this.pe)\r\n        }\r\n\r\n        static intersectSegment2Line(seg, line) {\r\n            let ip = [];\r\n\r\n            // Boundary cases\r\n            if (seg.ps.on(line)) {\r\n                ip.push(seg.ps);\r\n            }\r\n            // If both ends lay on line, return two intersection points\r\n            if (seg.pe.on(line) && !seg.isZeroLength()) {\r\n                ip.push(seg.pe);\r\n            }\r\n\r\n            if (ip.length > 0) {\r\n                return ip;          // done, intersection found\r\n            }\r\n\r\n            // If zero-length segment and nothing found, return no intersections\r\n            if (seg.isZeroLength()) {\r\n                return ip;\r\n            }\r\n\r\n            // Not a boundary case, check if both points are on the same side and\r\n            // hence there is no intersection\r\n            if (seg.ps.leftTo(line) && seg.pe.leftTo(line) ||\r\n                !seg.ps.leftTo(line) && !seg.pe.leftTo(line)) {\r\n                return ip;\r\n            }\r\n\r\n            // Calculate intersection between lines\r\n            let line1 = new Flatten.Line(seg.ps, seg.pe);\r\n            return line1.intersect(line);\r\n        }\r\n\r\n        static intersectSegment2Segment(seg1, seg2) {\r\n            let ip = [];\r\n\r\n            // quick reject\r\n            if (seg1.box.not_intersect(seg2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Special case of seg1 zero length\r\n            if (seg1.isZeroLength()) {\r\n                if (seg1.ps.on(seg2)) {\r\n                    ip.push(seg1.ps);\r\n                }\r\n                return ip;\r\n            }\r\n\r\n            // Special case of seg2 zero length\r\n            if (seg2.isZeroLength()) {\r\n                if (seg2.ps.on(seg1)) {\r\n                    ip.push(seg2.ps);\r\n                }\r\n                return ip;\r\n            }\r\n\r\n            // Neither seg1 nor seg2 is zero length\r\n            let line1 = new Flatten.Line(seg1.ps, seg1.pe);\r\n            let line2 = new Flatten.Line(seg2.ps, seg2.pe);\r\n\r\n            // Check overlapping between segments in case of incidence\r\n            // If segments touching, add one point. If overlapping, add two points\r\n            if (line1.incidentTo(line2)) {\r\n                if (seg1.ps.on(seg2)) {\r\n                    ip.push(seg1.ps);\r\n                }\r\n                if (seg1.pe.on(seg2)) {\r\n                    ip.push(seg1.pe);\r\n                }\r\n                if (seg2.ps.on(seg1) && !seg2.ps.equalTo(seg1.ps) && !seg2.ps.equalTo(seg1.pe)) {\r\n                    ip.push(seg2.ps);\r\n                }\r\n                if (seg2.pe.on(seg1) && !seg2.pe.equalTo(seg1.ps) && !seg2.pe.equalTo(seg1.pe)) {\r\n                    ip.push(seg2.pe);\r\n                }\r\n            }\r\n            else {                /* not incident - parallel or intersect */\r\n                // Calculate intersection between lines\r\n                let new_ip = line1.intersect(line2);\r\n                if (new_ip.length > 0 && new_ip[0].on(seg1) && new_ip[0].on(seg2)) {\r\n                    ip.push(new_ip[0]);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        static intersectSegment2Circle(segment, circle) {\r\n            let ips = [];\r\n\r\n            if (segment.box.not_intersect(circle.box)) {\r\n                return ips;\r\n            }\r\n\r\n            // Special case of zero length segment\r\n            if (segment.isZeroLength()) {\r\n                let [dist,shortest_segment] = segment.ps.distanceTo(circle.pc);\r\n                if (Flatten.Utils.EQ(dist, circle.r)) {\r\n                    ips.push(segment.ps);\r\n                }\r\n                return ips;\r\n            }\r\n\r\n            // Non zero-length segment\r\n            let line = new Flatten.Line(segment.ps, segment.pe);\r\n\r\n            let ips_tmp = line.intersect(circle);\r\n\r\n            for (let ip of ips_tmp) {\r\n                if (ip.on(segment)) {\r\n                    ips.push(ip);\r\n                }\r\n            }\r\n\r\n            return ips;\r\n        }\r\n\r\n        static intersectSegment2Arc(segment, arc) {\r\n            let ip = [];\r\n\r\n            if (segment.box.not_intersect(arc.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Special case of zero-length segment\r\n            if (segment.isZeroLength()) {\r\n                if (segment.ps.on(arc)) {\r\n                    ip.push(segment.ps);\r\n                }\r\n                return ip;\r\n            }\r\n\r\n            // Non-zero length segment\r\n            let line = new Flatten.Line(segment.ps, segment.pe);\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n            let ip_tmp = line.intersect(circle);\r\n\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(segment) && pt.on(arc)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n\r\n        }\r\n\r\n        /**\r\n         * Return string to draw segment in svg\r\n         * @param {Object} attrs - an object with attributes for svg path element,\r\n         * like \"stroke\", \"strokeWidth\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {stroke, strokeWidth, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n            return `\\n<line x1=\"${this.start.x}\" y1=\"${this.start.y}\" x2=\"${this.end.x}\" y2=\"${this.end.y}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" ${id_str} ${class_str} />`;\r\n\r\n        }\r\n\r\n        /**\r\n         * This method returns an object that defines how data will be\r\n         * serialized when called JSON.stringify() method\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"segment\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shortcut method to create new segment\r\n     */\r\n    Flatten.segment = (...args) => new Flatten.Segment(...args);\r\n};","/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing a circular arc\r\n     * @type {Arc}\r\n     */\r\n    Flatten.Arc = class Arc {\r\n        /**\r\n         *\r\n         * @param {Point} pc - arc center\r\n         * @param {number} r - arc radius\r\n         * @param {number} startAngle - start angle in radians from 0 to 2*PI\r\n         * @param {number} endAngle - end angle in radians from 0 to 2*PI\r\n         * @param {boolean} counterClockwise - arc direction, true - clockwise, false - counter clockwise\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Arc center\r\n             * @type {Point}\r\n             */\r\n            this.pc = new Flatten.Point();\r\n            /**\r\n             * Arc radius\r\n             * @type {number}\r\n             */\r\n            this.r = 1;\r\n            /**\r\n             * Arc start angle in radians\r\n             * @type {number}\r\n             */\r\n            this.startAngle = 0;\r\n            /**\r\n             * Arc end angle in radians\r\n             * @type {number}\r\n             */\r\n            this.endAngle = 2*Math.PI;\r\n            /**\r\n             * Arc orientation\r\n             * @type {boolean}\r\n             */\r\n            this.counterClockwise = Flatten.CCW;\r\n\r\n            if (args.length == 0)\r\n                return;\r\n\r\n            if (args.length == 1 && args[0] instanceof Object && args[0].name === \"arc\") {\r\n                let {pc, r, startAngle, endAngle, counterClockwise} = args[0];\r\n                this.pc = new Flatten.Point(pc.x, pc.y);\r\n                this.r = r;\r\n                this.startAngle = startAngle;\r\n                this.endAngle = endAngle;\r\n                this.counterClockwise = counterClockwise;\r\n                return;\r\n            }\r\n            else {\r\n                let [pc, r, startAngle, endAngle, counterClockwise] = [...args];\r\n                if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\r\n                if (r !== undefined) this.r = r;\r\n                if (startAngle !== undefined) this.startAngle = startAngle;\r\n                if (endAngle!== undefined) this.endAngle = endAngle;\r\n                if (counterClockwise !== undefined) this.counterClockwise = counterClockwise;\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Return new instance of arc\r\n         * @returns {Arc}\r\n         */\r\n        clone() {\r\n            return new Flatten.Arc(this.pc.clone(), this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n        }\r\n\r\n        /**\r\n         * Get sweep angle in radians. Sweep angle is non-negative number from 0 to 2*PI\r\n         * @returns {number}\r\n         */\r\n        get sweep() {\r\n            if (Flatten.Utils.EQ(this.startAngle, this.endAngle))\r\n                return 0.0;\r\n            if (Flatten.Utils.EQ(Math.abs(this.startAngle - this.endAngle), Flatten.PIx2)) {\r\n                return Flatten.PIx2;\r\n            }\r\n            let sweep;\r\n            if (this.counterClockwise) {\r\n                sweep = Flatten.Utils.GT(this.endAngle, this.startAngle) ?\r\n                    this.endAngle - this.startAngle : this.endAngle - this.startAngle + Flatten.PIx2;\r\n            } else {\r\n                sweep = Flatten.Utils.GT(this.startAngle, this.endAngle) ?\r\n                    this.startAngle - this.endAngle : this.startAngle - this.endAngle + Flatten.PIx2;\r\n            }\r\n\r\n            if ( Flatten.Utils.GT(sweep, Flatten.PIx2) ) {\r\n                sweep -= Flatten.PIx2;\r\n            }\r\n            if ( Flatten.Utils.LT(sweep, 0) ) {\r\n                sweep += Flatten.PIx2;\r\n            }\r\n            return sweep;\r\n        }\r\n\r\n        /**\r\n         * Get start point of arc\r\n         * @returns {Point}\r\n         */\r\n        get start() {\r\n            let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n            return p0.rotate(this.startAngle, this.pc);\r\n        }\r\n\r\n        /**\r\n         * Get end point of arc\r\n         * @returns {Point}\r\n         */\r\n        get end() {\r\n            let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n            return p0.rotate(this.endAngle, this.pc);\r\n        }\r\n\r\n        /**\r\n         * Get center of arc\r\n         * @returns {Point}\r\n         */\r\n        get center() {\r\n            return this.pc.clone();\r\n        }\r\n\r\n        get vertices() {\r\n            return [this.start.clone(), this.end.clone()];\r\n        }\r\n\r\n        /**\r\n         * Get arc length\r\n         * @returns {number}\r\n         */\r\n        get length() {\r\n            return Math.abs(this.sweep*this.r);\r\n        }\r\n\r\n        /**\r\n         * Get bounding box of the arc\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            let func_arcs = this.breakToFunctional();\r\n            let box = func_arcs.reduce( (acc, arc) => acc.merge(arc.start.box), new Flatten.Box() );\r\n            box = box.merge(this.end.box);\r\n            return box;\r\n        }\r\n\r\n        /**\r\n         * Returns true if arc contains point, false otherwise\r\n         * @param {Point} pt - point to test\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            // first check if  point on circle (pc,r)\r\n            if (!Flatten.Utils.EQ(this.pc.distanceTo(pt)[0], this.r))\r\n                return false;\r\n\r\n            // point on circle\r\n\r\n            if (pt.equalTo(this.start))\r\n                return true;\r\n\r\n            let angle = new Flatten.Vector(this.pc, pt).slope;\r\n            let test_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise);\r\n            return Flatten.Utils.LE(test_arc.length, this.length);\r\n        }\r\n\r\n        /**\r\n         * When given point belongs to arc, return array of two arcs split by this point. If points is incident\r\n         * to start or end point of the arc, return clone of the arc. If point does not belong to the arcs, return\r\n         * empty array.\r\n         * @param {Point} pt Query point\r\n         * @returns {Arc[]}\r\n         */\r\n        split(pt) {\r\n            if (!this.contains(pt))\r\n                return [];\r\n\r\n            if (Flatten.Utils.EQ_0(this.sweep))\r\n                return [this.clone()];\r\n\r\n            if (this.start.equalTo(pt) || this.end.equalTo(pt))\r\n                return [this.clone()];\r\n\r\n            let angle = new Flatten.Vector(this.pc, pt).slope;\r\n\r\n            return [\r\n                new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise),\r\n                new Flatten.Arc(this.pc, this.r, angle, this.endAngle, this.counterClockwise)\r\n            ]\r\n        }\r\n\r\n        /**\r\n         * Return middle point of the arc\r\n         * @returns {Point}\r\n         */\r\n        middle() {\r\n            let endAngle = this.counterClockwise ? this.startAngle + this.sweep/2 : this.startAngle - this.sweep/2;\r\n            let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\r\n            return arc.end;\r\n        }\r\n\r\n        /**\r\n         * Returns chord height (\"sagitta\") of the arc\r\n         * @returns {number}\r\n         */\r\n        chordHeight() {\r\n            return  (1.0 - Math.cos(Math.abs(this.sweep/2.0))) * this.r;\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between arc and other shape\r\n         * @param {Shape} shape Shape of the one of supported types <br/>\r\n         * @returns {Points[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n            if (shape instanceof Flatten.Line) {\r\n                return shape.intersect(this);\r\n            }\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Arc.intersectArc2Circle(this, shape);\r\n            }\r\n            if (shape instanceof Flatten.Segment) {\r\n                return shape.intersect(this);\r\n            }\r\n            if (shape instanceof Flatten.Arc) {\r\n                return Arc.intersectArc2Arc(this, shape);\r\n            }\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Flatten.Polygon.intersectShape2Polygon(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from arc to shape and return array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from arc to shape\r\n         * @returns {Segment} shortest segment between arc and shape (started at arc, ended at shape)\r\n\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [dist, shortest_segment] = Distance.point2arc(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [dist, shortest_segment] = Distance.arc2circle(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                let [dist, shortest_segment] = Distance.arc2line(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [dist, shortest_segment] = Distance.segment2arc(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [dist, shortest_segment] = Distance.arc2arc(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [dist, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Breaks arc in extreme point 0, pi/2, pi, 3*pi/2 and returns array of sub-arcs\r\n         * @returns {Arcs[]}\r\n         */\r\n        breakToFunctional() {\r\n            let func_arcs_array = [];\r\n            let angles = [0, Math.PI/2, 2*Math.PI/2, 3*Math.PI/2];\r\n            let pts = [\r\n                this.pc.translate(this.r,0),\r\n                this.pc.translate(0,this.r),\r\n                this.pc.translate(-this.r,0),\r\n                this.pc.translate(0,-this.r)\r\n            ];\r\n\r\n            // If arc contains extreme point,\r\n            // create test arc started at start point and ended at this extreme point\r\n            let test_arcs = [];\r\n            for (let i=0; i < 4; i++) {\r\n                if (pts[i].on(this)) {\r\n                    test_arcs.push(new Flatten.Arc(this.pc, this.r, this.startAngle, angles[i], this.counterClockwise));\r\n                }\r\n            }\r\n\r\n            if (test_arcs.length == 0) {                  // arc does contain any extreme point\r\n                func_arcs_array.push(this.clone());\r\n            }\r\n            else {                                        // arc passes extreme point\r\n                // sort these arcs by length\r\n                test_arcs.sort((arc1, arc2) => arc1.length - arc2.length);\r\n\r\n                for (let i = 0; i < test_arcs.length; i++) {\r\n                    let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n                    let new_arc;\r\n                    if (prev_arc) {\r\n                        new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                    }\r\n                    else {\r\n                        new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                    }\r\n                    if (!Flatten.Utils.EQ_0(new_arc.length)) {\r\n                        func_arcs_array.push(new_arc.clone());\r\n                    }\r\n                }\r\n\r\n                // add last sub arc\r\n                let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n                let new_arc;\r\n                if (prev_arc) {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, this.endAngle, this.counterClockwise);\r\n                }\r\n                else {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n                }\r\n                if (!Flatten.Utils.EQ_0(new_arc.length)) {\r\n                    func_arcs_array.push(new_arc.clone());\r\n                }\r\n            }\r\n            return func_arcs_array;\r\n        }\r\n\r\n        /**\r\n         * Return tangent unit vector in the start point in the direction from start to end\r\n         * @returns {Vector}\r\n         */\r\n        tangentInStart() {\r\n            let vec = new Flatten.Vector(this.pc, this.start);\r\n            let angle = this.counterClockwise ? Math.PI/2. : -Math.PI/2.;\r\n            let tangent = vec.rotate(angle).normalize();\r\n            return tangent;\r\n        }\r\n\r\n        /**\r\n         * Return tangent unit vector in the end point in the direction from end to start\r\n         * @returns {Vector}\r\n         */\r\n        tangentInEnd() {\r\n            let vec = new Flatten.Vector(this.pc, this.end);\r\n            let angle = this.counterClockwise ? -Math.PI/2. : Math.PI/2.;\r\n            let tangent = vec.rotate(angle).normalize();\r\n            return tangent;\r\n        }\r\n\r\n        /**\r\n         * Returns new arc with swapped start and end angles and reversed direction\r\n         * @returns {Arc}\r\n         */\r\n        reverse() {\r\n            return new Arc(this.pc, this.r, this.endAngle, this.startAngle, !this.counterClockwise);\r\n        }\r\n\r\n        /**\r\n         * Returns new arc translated by vector vec\r\n         * @param {Vector} vec\r\n         * @returns {Segment}\r\n         */\r\n        translate(...args) {\r\n            let arc = this.clone();\r\n            arc.pc = this.pc.translate(...args);\r\n            return arc;\r\n        }\r\n\r\n        /**\r\n         * Return new segment rotated by given angle around given point\r\n         * If point omitted, rotate around origin (0,0)\r\n         * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n         * @param {number} angle - rotation angle in radians\r\n         * @param {Point} center - center point, default is (0,0)\r\n         * @returns {Arc}\r\n         */\r\n        rotate(angle = 0, center = new Flatten.Point()) {\r\n            let m = new Flatten.Matrix();\r\n            m = m.translate(center.x, center.y).rotate(angle).translate(-center.x, -center.y);\r\n            return this.transform(m);\r\n        }\r\n\r\n        /**\r\n         * Return new arc transformed using affine transformation matrix <br/>\r\n         * Note, that non-equal scaling by x and y (matrix[0] != matrix[3]) produce illegal result\r\n         * TODO: support non-equal scaling arc to ellipse or throw exception ?\r\n         * @param {Matrix} matrix - affine transformation matrix\r\n         * @returns {Arc}\r\n         */\r\n        transform(matrix = new Flatten.Matrix()) {\r\n            let newStart = this.start.transform(matrix);\r\n            let newEnd = this.end.transform(matrix);\r\n            let newCenter = this.pc.transform(matrix);\r\n            let arc = Arc.arcSE(newCenter, newStart, newEnd, this.counterClockwise);\r\n            return arc;\r\n        }\r\n\r\n        static arcSE(center, start, end, counterClockwise) {\r\n            let {vector} = Flatten;\r\n            let startAngle = vector(center,start).slope;\r\n            let endAngle = vector(center, end).slope;\r\n            if (Flatten.Utils.EQ(startAngle, endAngle)) {\r\n                endAngle += 2*Math.PI;\r\n                counterClockwise = true;\r\n            }\r\n            let r = vector(center, start).length;\r\n\r\n            return new Arc(center, r, startAngle, endAngle, counterClockwise);\r\n        }\r\n\r\n        static intersectArc2Arc(arc1, arc2) {\r\n            var ip = [];\r\n\r\n            if (arc1.box.not_intersect(arc2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Special case: overlapping arcs\r\n            // May return up to 4 intersection points\r\n            if (arc1.pc.equalTo(arc2.pc) && Flatten.Utils.EQ(arc1.r, arc2.r)) {\r\n                let pt;\r\n\r\n                pt = arc1.start;\r\n                if (pt.on(arc2))\r\n                    ip.push(pt);\r\n\r\n                pt = arc1.end;\r\n                if (pt.on(arc2))\r\n                    ip.push(pt);\r\n\r\n                pt = arc2.start;\r\n                if (pt.on(arc1)) ip.push(pt);\r\n\r\n                pt = arc2.end;\r\n                if (pt.on(arc1)) ip.push(pt);\r\n\r\n                return ip;\r\n            }\r\n\r\n            // Common case\r\n            let circle1 = new Flatten.Circle(arc1.pc, arc1.r);\r\n            let circle2 = new Flatten.Circle(arc2.pc, arc2.r);\r\n            let ip_tmp =  circle1.intersect(circle2);\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(arc1) && pt.on(arc2)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        static intersectArc2Circle(arc, circle) {\r\n            let ip = [];\r\n\r\n            if (arc.box.not_intersect(circle.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Case when arc center incident to circle center\r\n            // Return arc's end points as 2 intersection points\r\n            if (circle.pc.equalTo(arc.pc) && Flatten.Utils.EQ(circle.r, arc.r)) {\r\n                ip.push(arc.start);\r\n                ip.push(arc.end);\r\n                return ip;\r\n            }\r\n\r\n            // Common case\r\n            let circle1 = circle;\r\n            let circle2 = new Flatten.Circle(arc.pc, arc.r);\r\n            let ip_tmp = circle1.intersect(circle2);\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(arc)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        definiteIntegral(ymin=0) {\r\n            let f_arcs = this.breakToFunctional();\r\n            let area = f_arcs.reduce( (acc, arc) => acc + arc.circularSegmentDefiniteIntegral(ymin), 0.0 );\r\n            return area;\r\n        }\r\n\r\n        circularSegmentDefiniteIntegral(ymin) {\r\n            let line = new Flatten.Line(this.start, this.end);\r\n            let onLeftSide = this.pc.leftTo(line);\r\n            let segment = new Flatten.Segment(this.start, this.end);\r\n            let areaTrapez = segment.definiteIntegral(ymin);\r\n            let areaCircularSegment = this.circularSegmentArea();\r\n            let area = onLeftSide ? areaTrapez - areaCircularSegment : areaTrapez + areaCircularSegment;\r\n            return area;\r\n        }\r\n\r\n        circularSegmentArea() {\r\n            return (0.5*this.r*this.r*(this.sweep - Math.sin(this.sweep)))\r\n        }\r\n\r\n        /**\r\n         * Return string to draw arc in svg\r\n         * @param {Object} attrs - an object with attributes of svg path element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let largeArcFlag = this.sweep <= Math.PI ? \"0\" : \"1\";\r\n            let sweepFlag = this.counterClockwise ? \"1\" : \"0\";\r\n            let {stroke, strokeWidth, fill, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n            if (Flatten.Utils.EQ(this.sweep, 2*Math.PI)) {\r\n                let circle = new Flatten.Circle(this.pc, this.r);\r\n                return circle.svg(attrs);\r\n            }\r\n            else {\r\n                return `\\n<path d=\"M${this.start.x},${this.start.y}\r\n                             A${this.r},${this.r} 0 ${largeArcFlag},${sweepFlag} ${this.end.x},${this.end.y}\"\r\n                    stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" ${id_str} ${class_str} />`\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This method returns an object that defines how data will be\r\n         * serialized when called JSON.stringify() method\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"arc\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create arc equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.arc = (...args) => new Flatten.Arc(...args);\r\n};","/**\r\n * Created by Alex Bol on 3/7/2017.\r\n */\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class Box represent bounding box of the shape\r\n     * @type {Box}\r\n     */\r\n    Flatten.Box = class Box {\r\n        /**\r\n         *\r\n         * @param {number} xmin - minimal x coordinate\r\n         * @param {number} ymin - minimal y coordinate\r\n         * @param {number} xmax - maximal x coordinate\r\n         * @param {number} ymax - maximal y coordinate\r\n         */\r\n        constructor(xmin=undefined, ymin=undefined, xmax=undefined, ymax=undefined) {\r\n            /**\r\n             * Minimal x coordinate\r\n             * @type {number}\r\n             */\r\n            this.xmin = xmin;\r\n            /**\r\n             * Minimal y coordinate\r\n             * @type {number}\r\n             */\r\n            this.ymin = ymin;\r\n            /**\r\n             * Maximal x coordinate\r\n             * @type {number}\r\n             */\r\n            this.xmax = xmax;\r\n            /**\r\n             * Maximal y coordinate\r\n             * @type {number}\r\n             */\r\n            this.ymax = ymax;\r\n        }\r\n\r\n        /**\r\n         * Clones and returns new instance of box\r\n         * @returns {Box}\r\n         */\r\n        clone() {\r\n            return new Box(this.xmin, this.ymin, this.xmax, this.ymax);\r\n        }\r\n\r\n        /**\r\n         * Property low need for interval tree interface\r\n         * @returns {Point}\r\n         */\r\n        get low() {\r\n            return new Flatten.Point(this.xmin, this.ymin);\r\n        }\r\n\r\n        /**\r\n         * Property high need for interval tree interface\r\n         * @returns {Point}\r\n         */\r\n        get high() {\r\n            return new Flatten.Point(this.xmax, this.ymax);\r\n        }\r\n\r\n        /**\r\n         * Property max returns the box itself !\r\n         * @returns {Box}\r\n         */\r\n        get max() {\r\n            return this.clone();\r\n        }\r\n\r\n        /**\r\n         * Return center of the box\r\n         * @returns {Point}\r\n         */\r\n        get center() {\r\n            return new Flatten.Point( (this.xmin + this.xmax)/2, (this.ymin + this.ymax)/2 );\r\n        }\r\n\r\n        /**\r\n         * Returns true if not intersected with other box\r\n         * @param {Box} other_box - other box to test\r\n         * @returns {boolean}\r\n         */\r\n        not_intersect(other_box) {\r\n            return (\r\n                this.xmax < other_box.xmin ||\r\n                this.xmin > other_box.xmax ||\r\n                this.ymax < other_box.ymin ||\r\n                this.ymin > other_box.ymax\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Returns true if intersected with other box\r\n         * @param {Box} other_box - Query box\r\n         * @returns {boolean}\r\n         */\r\n        intersect(other_box) {\r\n            return !this.not_intersect(other_box);\r\n        }\r\n\r\n        /**\r\n         * Returns new box merged with other box\r\n         * @param {Box} other_box - Other box to merge with\r\n         * @returns {Box}\r\n         */\r\n        merge(other_box) {\r\n            return new Box(\r\n                this.xmin === undefined ? other_box.xmin : Math.min(this.xmin, other_box.xmin),\r\n                this.ymin === undefined ? other_box.ymin : Math.min(this.ymin, other_box.ymin),\r\n                this.xmax === undefined ? other_box.xmax : Math.max(this.xmax, other_box.xmax),\r\n                this.ymax === undefined ? other_box.ymax : Math.max(this.ymax, other_box.ymax)\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Defines predicate \"less than\" between two boxes. Need for interval index\r\n         * @param {Box} other_box - other box\r\n         * @returns {boolean} - true if this box less than other box, false otherwise\r\n         */\r\n        less_than(other_box) {\r\n            if (this.low.lessThan(other_box.low))\r\n                return true;\r\n            if (this.low.equalTo(other_box.low) && this.high.lessThan(other_box.high))\r\n                return true;\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this box is equal to other box, false otherwise\r\n         * @param {Box} other_box - query box\r\n         * @returns {boolean}\r\n         */\r\n        equal_to(other_box) {\r\n            return (this.low.equalTo(other_box.low) && this.high.equalTo(other_box.high));\r\n        }\r\n\r\n        output() {\r\n            return this.clone();\r\n        }\r\n\r\n        maximal_val(box1, box2) {\r\n            // return pt1.lessThan(pt2) ? pt2.clone() : pt1.clone();\r\n            return box1.merge(box2);\r\n        }\r\n\r\n        val_less_than(pt1, pt2) {\r\n            return pt1.lessThan(pt2);\r\n        }\r\n\r\n        /**\r\n         * Set new values to the box object\r\n         * @param {number} xmin - miminal x coordinate\r\n         * @param {number} ymin - minimal y coordinate\r\n         * @param {number} xmax - maximal x coordinate\r\n         * @param {number} ymax - maximal y coordinate\r\n         */\r\n        set(xmin, ymin, xmax, ymax) {\r\n            this.xmin = xmin;\r\n            this.ymin = ymin;\r\n            this.xmax = xmax;\r\n            this.ymax = ymax;\r\n        }\r\n\r\n        /**\r\n         * Return string to draw circle in svg\r\n         * @param {Object} attrs - an object with attributes of svg rectangle element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {stroke, strokeWidth, fill, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n            let width = this.xmax - this.xmin;\r\n            let height = this.ymax - this.ymin;\r\n\r\n            return `\\n<rect x=\"${this.xmin}\" y=\"${this.ymin}\" width=${width} height=${height} stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" ${id_str} ${class_str} />`;\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Shortcut to create new circle\r\n     * @param args\r\n     * @returns {Box}\r\n     */\r\n    Flatten.box = (...args) => new Flatten.Box(...args);\r\n\r\n};\r\n","/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing an edge of polygon. Edge shape may be Segment or Arc.\r\n     * Each edge contains references to the next and previous edges in the face of the polygon.\r\n     *\r\n     * @type {Edge}\r\n     */\r\n    Flatten.Edge = class Edge {\r\n        /**\r\n         * Construct new instance of edge\r\n         * @param {Shape} shape Shape of type Segment of Arc\r\n         */\r\n        constructor(shape) {\r\n            /**\r\n             * Shape of the edge: Segment or Arc\r\n             */\r\n            this.shape = shape;\r\n            /**\r\n             * Pointer to the next edge in the face\r\n             */\r\n            this.next;\r\n            /**\r\n             * Pointer to the previous edge in the face\r\n             */\r\n            this.prev;\r\n            /**\r\n             * Pointer to the face containing this edge\r\n             * @type {Face}\r\n             */\r\n            this.face;\r\n            /**\r\n             * \"Arc distance\" from the face start\r\n             * @type {number}\r\n             */\r\n            this.arc_length = 0;\r\n            /**\r\n             * Start inclusion flag (inside/outside/boundary)\r\n             * @type {Boolean}\r\n             */\r\n            this.bvStart = undefined;\r\n            /**\r\n             * End inclusion flag (inside/outside/boundary)\r\n             * @type {Boolean}\r\n             */\r\n            this.bvEnd = undefined;\r\n            /**\r\n             * Edge inclusion flag (Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY)\r\n             * @type {*}\r\n             */\r\n            this.bv = undefined;\r\n            /**\r\n             * Overlap flag for boundary edge (Flatten.OVERLAP_SAME/Flatten.OVERLAP_OPPOSITE)\r\n             * @type {*}\r\n             */\r\n            this.overlap = undefined;\r\n        }\r\n\r\n        /**\r\n         * Get edge start point\r\n         */\r\n        get start() {\r\n            return this.shape.start;\r\n        }\r\n\r\n        /**\r\n         * Get edge end point\r\n         */\r\n        get end() {\r\n            return this.shape.end;\r\n        }\r\n\r\n        /**\r\n         * Get edge length\r\n         */\r\n        get length() {\r\n            return this.shape.length;\r\n        }\r\n\r\n        /**\r\n         * Get bounding box of the edge\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return this.shape.box;\r\n        }\r\n\r\n        isSegment() {\r\n            return this.shape instanceof Flatten.Segment;\r\n        }\r\n\r\n        isArc() {\r\n            return this.shape instanceof Flatten.Arc;\r\n        }\r\n        /**\r\n         * Get middle point of the edge\r\n         * @returns {Point}\r\n         */\r\n        middle() {\r\n            return this.shape.middle();\r\n        }\r\n\r\n        /**\r\n         * Returns true if point belongs to the edge, false otherwise\r\n         * @param {Point} pt - test point\r\n         */\r\n        contains(pt) {\r\n            return this.shape.contains(pt);\r\n        }\r\n\r\n        /**\r\n         * Set inclusion flag of the edge with respect to another polygon\r\n         * Inclusion flag is one of Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY\r\n         * @param polygon\r\n         */\r\n        setInclusion(polygon) {\r\n            if (this.bv !== undefined) return this.bv;\r\n\r\n            if (this.bvStart === undefined) {\r\n                this.bvStart = Flatten.ray_shoot(polygon, this.start);\r\n            }\r\n            if (this.bvEnd === undefined) {\r\n                this.bvEnd = Flatten.ray_shoot(polygon, this.end);\r\n            }\r\n            /* At least one end outside - the whole edge outside */\r\n            if (this.bvStart === Flatten.OUTSIDE || this.bvEnd == Flatten.OUTSIDE) {\r\n                this.bv = Flatten.OUTSIDE;\r\n            }\r\n            /* At least one end inside - the whole edge inside */\r\n            else if (this.bvStart === Flatten.INSIDE || this.bvEnd == Flatten.INSIDE) {\r\n                this.bv = Flatten.INSIDE;\r\n            }\r\n            /* Both are boundary - check the middle point */\r\n            else {\r\n                let bvMiddle = Flatten.ray_shoot(polygon, this.middle());\r\n                this.bv = bvMiddle;\r\n            }\r\n            return this.bv;\r\n        }\r\n\r\n        /**\r\n         * Set overlapping between two coincident boundary edges\r\n         * Overlapping flag is one of Flatten.OVERLAP_SAME or Flatten.OVERLAP_OPPOSITE\r\n         * @param edge\r\n         */\r\n        setOverlap(edge) {\r\n            let flag = undefined;\r\n            let shape1 = this.shape;\r\n            let shape2 = edge.shape;\r\n\r\n            if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Segment) {\r\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end)) {\r\n                    flag = Flatten.OVERLAP_SAME;\r\n                }\r\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start)) {\r\n                    flag = Flatten.OVERLAP_OPPOSITE;\r\n                }\r\n            }\r\n            else if (shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Arc) {\r\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && /*shape1.counterClockwise === shape2.counterClockwise &&*/\r\n                    shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_SAME;\r\n                }\r\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && /*shape1.counterClockwise !== shape2.counterClockwise &&*/\r\n                    shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_OPPOSITE;\r\n                }\r\n            }\r\n            else if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Arc ||\r\n                shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Segment) {\r\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_SAME;\r\n                }\r\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_OPPOSITE;\r\n                }\r\n            }\r\n\r\n            /* Do not update overlap flag if already set on previous chain */\r\n            if (this.overlap === undefined) this.overlap = flag;\r\n            if (edge.overlap === undefined) edge.overlap = flag;\r\n        }\r\n\r\n        svg() {\r\n            if (this.shape instanceof Flatten.Segment) {\r\n                return ` L${this.shape.end.x},${this.shape.end.y}`;\r\n            }\r\n            else if (this.shape instanceof  Flatten.Arc) {\r\n                let arc = this.shape;\r\n                let largeArcFlag;\r\n                let sweepFlag = arc.counterClockwise ? \"1\" : \"0\";\r\n\r\n                // Draw full circe arc as special case: split it into two half-circles\r\n                if (Flatten.Utils.EQ(arc.sweep, 2*Math.PI)) {\r\n                    let sign = arc.counterClockwise ? 1 : -1;\r\n                    let halfArc1 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle, arc.startAngle + sign*Math.PI, arc.counterClockwise);\r\n                    let halfArc2 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle + sign*Math.PI, arc.endAngle, arc.counterClockwise);\r\n\r\n                    largeArcFlag = \"0\";\r\n\r\n                    return ` A${halfArc1.r},${halfArc1.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc1.end.x},${halfArc1.end.y}\r\n                    A${halfArc2.r},${halfArc2.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc2.end.x},${halfArc2.end.y}`\r\n                }\r\n                else {\r\n                    largeArcFlag = arc.sweep <= Math.PI ? \"0\" : \"1\";\r\n\r\n                    return ` A${arc.r},${arc.r} 0 ${largeArcFlag},${sweepFlag} ${arc.end.x},${arc.end.y}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        toJSON() {\r\n            return this.shape.toJSON();\r\n        }\r\n    };\r\n};","/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function (Flatten) {\r\n    let {Point, point, Segment, segment, Arc, Box, Edge, Circle} = Flatten;\r\n\r\n    /**\r\n     * Class representing a face (closed loop) in a [polygon]{@link Flatten.Polygon} object.\r\n     * Face is a circular bidirectional linked list of [edges]{@link Flatten.Edge}.\r\n     * Face object cannot be instantiated with a constructor.\r\n     * Instead, use [polygon.addFace()]{@link Flatten.Polygon#addFace} method.\r\n     * <br/>\r\n     * Note, that face only set entry point to the linked list of edges but does not contain edges by itself.\r\n     * Container of edges is a property of the polygon object. <br/>\r\n     *\r\n     * @example\r\n     * // Face implements \"next\" iterator which enables to iterate edges in for loop:\r\n     * for (let edge of face) {\r\n     *      console.log(edge.shape.length)     // do something\r\n     * }\r\n     *\r\n     * // Instead, it is possible to iterate edges as linked list, starting from face.first:\r\n     * let edge = face.first;\r\n     * do {\r\n     *   console.log(edge.shape.length);   // do something\r\n     *   edge = edge.next;\r\n     * } while (edge != face.first)\r\n     */\r\n    Flatten.Face = class Face {\r\n        constructor(polygon, ...args) {\r\n            /**\r\n             * Reference to the first edge in face\r\n             */\r\n            this.first;\r\n            /**\r\n             * Reference to the last edge in face\r\n             */\r\n            this.last;\r\n\r\n            this._box = undefined;  // new Box();\r\n            this._orientation = undefined;\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            /* If passed an array it supposed to be:\r\n             1) array of shapes that performs close loop or\r\n             2) array of points that performs set of vertices\r\n             */\r\n            if (args.length == 1) {\r\n                if (args[0] instanceof Array) {\r\n                    // let argsArray = args[0];\r\n                    let shapes = args[0];  // argsArray[0];\r\n                    if (shapes.length == 0)\r\n                        return;\r\n\r\n                    if (shapes.every((shape) => {\r\n                            return shape instanceof Point\r\n                        })) {\r\n                        let segments = Face.points2segments(shapes);\r\n                        this.shapes2face(polygon.edges, segments);\r\n                    }\r\n                    else if (shapes.every((shape) => {\r\n                            return (shape instanceof Segment || shape instanceof Arc)\r\n                        })) {\r\n                        this.shapes2face(polygon.edges, shapes);\r\n                    }\r\n                    // this is from JSON.parse object\r\n                    else if (shapes.every((shape) => {\r\n                            return (shape.name === \"segment\" || shape.name === \"arc\")\r\n                        })) {\r\n                        let flattenShapes = [];\r\n                        for (let shape of shapes) {\r\n                            let flattenShape;\r\n                            if (shape.name === \"segment\") {\r\n                                flattenShape = new Segment(shape);\r\n                            }\r\n                            else {\r\n                                flattenShape = new Arc(shape);\r\n                            }\r\n                            flattenShapes.push(flattenShape);\r\n                        }\r\n                        this.shapes2face(polygon.edges, flattenShapes);\r\n                    }\r\n                }\r\n                /* Create new face and copy edges into polygon.edges set */\r\n                else if (args[0] instanceof Face) {\r\n                    let face = args[0];\r\n                    this.first = face.first;\r\n                    this.last = face.last;\r\n                    for (let edge of face) {\r\n                        polygon.edges.add(edge);\r\n                    }\r\n                }\r\n                /* Instantiate face from circle circle in CCW orientation */\r\n                else if (args[0] instanceof Circle) {\r\n                    this.shapes2face(polygon.edges, [args[0].toArc(Flatten.CCW)]);\r\n                }\r\n                /* Instantiate face from a box in CCW orientation */\r\n                else if (args[0] instanceof Box) {\r\n                    let box = args[0];\r\n                    this.shapes2face(polygon.edges, [\r\n                        segment(point(box.xmin, box.ymin), point(box.xmax, box.ymin)),\r\n                        segment(point(box.xmax, box.ymin), point(box.xmax, box.ymax)),\r\n                        segment(point(box.xmax, box.ymax), point(box.xmin, box.ymax)),\r\n                        segment(point(box.xmin, box.ymax), point(box.xmin, box.ymin))\r\n                    ]);\r\n                }\r\n            }\r\n            /* If passed two edges, consider them as start and end of the face loop */\r\n            /* THIS METHOD WILL BE USED BY BOOLEAN OPERATIONS */\r\n            /* Assume that edges already copied to polygon.edges set in the clip algorithm !!! */\r\n            if (args.length == 2 && args[0] instanceof Edge && args[1] instanceof Edge) {\r\n                this.first = args[0];                          // first edge in face or undefined\r\n                this.last = args[1];                           // last edge in face or undefined\r\n                this.last.next = this.first;\r\n                this.first.prev = this.last;\r\n\r\n                // set arc length\r\n                this.setArcLength();\r\n                /*\r\n                 let edge = this.first;\r\n                 edge.arc_length = 0;\r\n                 edge = edge.next;\r\n                 while (edge !== this.first) {\r\n                 edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n                 edge = edge.next;\r\n                 }\r\n                 */\r\n\r\n                // this.box = this.getBox();\r\n                // this.orientation = this.getOrientation();      // face direction cw or ccw\r\n            }\r\n        }\r\n\r\n        [Symbol.iterator]() {\r\n            let edge = undefined;\r\n            return {\r\n                next: () => {\r\n                    let value = edge ? edge : this.first;\r\n                    let done = this.first ? (edge ? edge === this.first : false) : true;\r\n                    edge = value ? value.next : undefined;\r\n                    return {value: value, done: done};\r\n                }\r\n            };\r\n        };\r\n\r\n        /**\r\n         * Return array of edges from first to last\r\n         * @returns {Array}\r\n         */\r\n        get edges() {\r\n            let face_edges = [];\r\n            for (let edge of this) {\r\n                face_edges.push(edge);\r\n            }\r\n            return face_edges;\r\n        }\r\n\r\n        /**\r\n         * Return number of edges in the face\r\n         * @returns {number}\r\n         */\r\n        get size() {\r\n            let counter = 0;\r\n            for (let edge of this) {\r\n                counter++;\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Return bounding box of the face\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            if (this._box === undefined) {\r\n                let box = new Flatten.Box();\r\n                for (let edge of this) {\r\n                    box = box.merge(edge.box);\r\n                }\r\n                this._box = box;\r\n            }\r\n            return this._box;\r\n        }\r\n\r\n        static points2segments(points) {\r\n            let segments = [];\r\n            for (let i = 0; i < points.length; i++) {\r\n                segments.push(new Segment(points[i], points[(i + 1) % points.length]));\r\n            }\r\n            return segments;\r\n        }\r\n\r\n        shapes2face(edges, shapes) {\r\n            for (let shape of shapes) {\r\n                let edge = new Edge(shape);\r\n                this.append(edges, edge);\r\n                // this.box = this.box.merge(shape.box);\r\n                // edges.add(edge);\r\n            }\r\n            // this.orientation = this.getOrientation();              // face direction cw or ccw\r\n        }\r\n\r\n        /**\r\n         * Returns true if face is empty, false otherwise\r\n         * @returns {boolean}\r\n         */\r\n        isEmpty() {\r\n            return (this.first === undefined && this.last === undefined)\r\n        }\r\n\r\n        /**\r\n         * Append given edge after the last edge (and before the first edge). <br/>\r\n         * This method mutates current object and does not return any value\r\n         * @param {PlanarSet} edges - Container of edges\r\n         * @param {Edge} edge - Edge to be appended to the linked list\r\n         */\r\n        append(edges, edge) {\r\n            if (this.first === undefined) {\r\n                edge.prev = edge;\r\n                edge.next = edge;\r\n                this.first = edge;\r\n                this.last = edge;\r\n                edge.arc_length = 0;\r\n            }\r\n            else {\r\n                // append to end\r\n                edge.prev = this.last;\r\n                this.last.next = edge;\r\n\r\n                // update edge to be last\r\n                this.last = edge;\r\n\r\n                // restore circular links\r\n                this.last.next = this.first;\r\n                this.first.prev = this.last;\r\n\r\n                // set arc length\r\n                edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n            }\r\n            edge.face = this;\r\n\r\n            edges.add(edge);      // Add new edges into edges container\r\n        }\r\n\r\n        /**\r\n         * Insert edge newEdge into the linked list after the edge edgeBefore <br/>\r\n         * This method mutates current object and does not return any value\r\n         * @param {PlanarSet} edges - Container of edges\r\n         * @param {Edge} newEdge - Edge to be inserted into linked list\r\n         * @param {Edge} edgeBefore - Edge to insert newEdge after it\r\n         */\r\n        insert(edges, newEdge, edgeBefore) {\r\n            if (this.first === undefined) {\r\n                newEdge.prev = newEdge;\r\n                newEdge.next = newEdge;\r\n                this.first = newEdge;\r\n                this.last = newEdge;\r\n            }\r\n            else {\r\n                /* set links to new edge */\r\n                let edgeAfter = edgeBefore.next;\r\n                edgeBefore.next = newEdge;\r\n                edgeAfter.prev = newEdge;\r\n\r\n                /* set links from new edge */\r\n                newEdge.prev = edgeBefore;\r\n                newEdge.next = edgeAfter;\r\n\r\n                /* extend chain if new edge added after last edge */\r\n                if (this.last === edgeBefore)\r\n                    this.first = newEdge;\r\n            }\r\n            newEdge.face = this;\r\n\r\n            // set arc length\r\n            if (newEdge.prev === this.last) {\r\n                newEdge.arc_length = 0;\r\n            }\r\n            else {\r\n                newEdge.arc_length = newEdge.prev.arc_length + newEdge.prev.length;\r\n            }\r\n\r\n            edges.add(newEdge);      // Add new edges into edges container\r\n        }\r\n\r\n        /**\r\n         * Remove the given edge from the linked list of the face <br/>\r\n         * This method mutates current object and does not return any value\r\n         * @param {PlanarSet} edges - Container of edges\r\n         * @param {Edge} edge - Edge to be removed\r\n         */\r\n        remove(edges, edge) {\r\n            // special case if last edge removed\r\n            if (edge === this.first && edge === this.last) {\r\n                this.first = undefined;\r\n                this.last = undefined;\r\n            }\r\n            else {\r\n                // update linked list\r\n                edge.prev.next = edge.next;\r\n                edge.next.prev = edge.prev;\r\n                // update first if need\r\n                if (edge === this.first) {\r\n                    this.first = edge.next;\r\n                }\r\n                // update last if need\r\n                if (edge === this.last) {\r\n                    this.last = edge.prev;\r\n                }\r\n            }\r\n            edges.delete(edge);      // delete from PlanarSet of edges and update index\r\n        }\r\n\r\n        /**\r\n         * Reverse orientation of the face: first edge become last and vice a verse,\r\n         * all edges starts and ends swapped, direction of arcs inverted.\r\n         */\r\n        reverse() {\r\n            // collect edges in revert order with reverted shapes\r\n            let edges = [];\r\n            let edge_tmp = this.last;\r\n            do {\r\n                // reverse shape\r\n                edge_tmp.shape = edge_tmp.shape.reverse();\r\n                edges.push(edge_tmp);\r\n                edge_tmp = edge_tmp.prev;\r\n            } while (edge_tmp !== this.last);\r\n\r\n            // restore linked list\r\n            this.first = undefined;\r\n            this.last = undefined;\r\n            for (let edge of edges) {\r\n                if (this.first === undefined) {\r\n                    edge.prev = edge;\r\n                    edge.next = edge;\r\n                    this.first = edge;\r\n                    this.last = edge;\r\n                    edge.arc_length = 0;\r\n                }\r\n                else {\r\n                    // append to end\r\n                    edge.prev = this.last;\r\n                    this.last.next = edge;\r\n\r\n                    // update edge to be last\r\n                    this.last = edge;\r\n\r\n                    // restore circular links\r\n                    this.last.next = this.first;\r\n                    this.first.prev = this.last;\r\n\r\n                    // set arc length\r\n                    edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n                }\r\n            }\r\n\r\n            // Recalculate orientation, if set\r\n            if (this._orientation !== undefined) {\r\n                this._orientation = undefined;\r\n                this._orientation = this.orientation();\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Set arc_length property for each of the edges in the face.\r\n         * Arc_length of the edge it the arc length from the first edge of the face\r\n         */\r\n        setArcLength() {\r\n            for (let edge of this) {\r\n                if (edge === this.first) {\r\n                    edge.arc_length = 0.0;\r\n                }\r\n                else {\r\n                    edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n                }\r\n                edge.face = this;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns the absolute value of the area of the face\r\n         * @returns {number}\r\n         */\r\n        area() {\r\n            return Math.abs(this.signedArea());\r\n        }\r\n\r\n        /**\r\n         * Returns signed area of the simple face.\r\n         * Face is simple if it has no self intersections that change its orientation.\r\n         * Then the area will be positive if the orientation of the face is clockwise,\r\n         * and negative if orientation is counterclockwise.\r\n         * It may be zero if polygon is degenerated.\r\n         * @returns {number}\r\n         */\r\n        signedArea() {\r\n            let sArea = 0;\r\n            let ymin = this.box.ymin;\r\n            for (let edge of this) {\r\n                sArea += edge.shape.definiteIntegral(ymin);\r\n            }\r\n            return sArea;\r\n        }\r\n\r\n        /**\r\n         * Return face orientation: one of Flatten.ORIENTATION.CCW, Flatten.ORIENTATION.CW, Flatten.ORIENTATION.NOT_ORIENTABLE <br/>\r\n         * According to Green theorem the area of a closed curve may be calculated as double integral,\r\n         * and the sign of the integral will be defined by the direction of the curve.\r\n         * When the integral (\"signed area\") will be negative, direction is counter clockwise,\r\n         * when positive - clockwise and when it is zero, polygon is not orientable.\r\n         * See {@link https://mathinsight.org/greens_theorem_find_area}\r\n         * @returns {number}\r\n         */\r\n        orientation() {\r\n            if (this._orientation === undefined) {\r\n                let area = this.signedArea();\r\n                if (Flatten.Utils.EQ_0(area)) {\r\n                    this._orientation = Flatten.ORIENTATION.NOT_ORIENTABLE;\r\n                }\r\n                else if (Flatten.Utils.LT(area, 0)) {\r\n                    this._orientation = Flatten.ORIENTATION.CCW;\r\n                }\r\n                else {\r\n                    this._orientation = Flatten.ORIENTATION.CW;\r\n                }\r\n            }\r\n            return this._orientation;\r\n        }\r\n\r\n        /**\r\n         * Returns true if face of the polygon is simple (no self-intersection points found)\r\n         * NOTE: this method is incomplete because it doe not exclude touching points\r\n         * Real self intersection inverts orientation of the polygon.\r\n         * But this is also good enough for the demonstration of the idea\r\n         * @param {Edges} edges - reference to polygon.edges to provide search index\r\n         * @returns {boolean}\r\n         */\r\n        isSimple(edges) {\r\n            let ip = Face.getSelfIntersections(this, edges, true);\r\n            return ip.length == 0;\r\n        }\r\n\r\n        static getSelfIntersections(face, edges, exitOnFirst = false) {\r\n            let int_points = [];\r\n\r\n            // calculate intersections\r\n            for (let edge1 of face) {\r\n\r\n                // request edges of polygon in the box of edge1\r\n                let resp = edges.search(edge1.box);\r\n\r\n                // for each edge2 in response\r\n                for (let edge2 of resp) {\r\n\r\n                    // Skip itself\r\n                    if (edge1 === edge2)\r\n                        continue;\r\n\r\n                    // Skip next and previous edge if both are segment (if one of them arc - calc intersection)\r\n                    if (edge1.shape instanceof Flatten.Segment && edge2.shape instanceof Flatten.Segment &&\r\n                        (edge1.next === edge2 || edge1.prev === edge2))\r\n                        continue;\r\n\r\n                    // calculate intersections between edge1 and edge2\r\n                    let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n                    // for each intersection point\r\n                    for (let pt of ip) {\r\n\r\n                        // skip start-end connections\r\n                        if (pt.equalTo(edge1.start) && pt.equalTo(edge2.end) && edge2 === edge1.prev)\r\n                            continue;\r\n                        if (pt.equalTo(edge1.end) && pt.equalTo(edge2.start) && edge2 === edge1.next)\r\n                            continue;\r\n\r\n                        int_points.push(pt);\r\n\r\n                        if (exitOnFirst)\r\n                            break;\r\n                    }\r\n\r\n                    if (int_points.length > 0 && exitOnFirst)\r\n                        break;\r\n                }\r\n\r\n                if (int_points.length > 0 && exitOnFirst)\r\n                    break;\r\n\r\n            }\r\n            return int_points;\r\n        }\r\n\r\n        toJSON() {\r\n            return this.edges.map(edge => edge.toJSON());\r\n        }\r\n\r\n        /**\r\n         * Returns string to be assigned to \"d\" attribute inside defined \"path\"\r\n         * @returns {string}\r\n         */\r\n        svg() {\r\n            let svgStr = `\\nM${this.first.start.x},${this.first.start.y}`;\r\n            for (let edge of this) {\r\n                svgStr += edge.svg();\r\n            }\r\n            svgStr += ` z`;\r\n            return svgStr;\r\n        }\r\n\r\n    };\r\n};","\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Point, Segment, Line, Circle, Arc, Box, Vector} = Flatten;\r\n    /**\r\n     * Class representing a horizontal ray, used by ray shooting algorithm\r\n     * @type {Ray}\r\n     */\r\n    Flatten.Ray = class Ray {\r\n        /**\r\n         * Construct ray by setting start point\r\n         * @param {Point} pt - start point\r\n         */\r\n        constructor(...args) {\r\n            this.pt = new Point();\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Point) {\r\n                this.pt = args[0].clone();\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                this.pt = new Point(args[0], args[1]);\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Returns copied instance of the ray object\r\n         * @returns {Ray}\r\n         */\r\n        clone() {\r\n            return new Ray(this.pt);\r\n        }\r\n\r\n        /**\r\n         * Returns half-infinite bounding box of the ray\r\n         * @returns {Box} - bounding box\r\n         */\r\n        get box() {\r\n            return new Box(\r\n                this.pt.x,\r\n                this.pt.y,\r\n                Number.POSITIVE_INFINITY,\r\n                this.pt.y\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Return ray start point\r\n         * @returns {Point} - ray start point\r\n         */\r\n        get start() {\r\n            return this.pt;\r\n        }\r\n\r\n        /**\r\n         * Return ray normal vector (0,1) - horizontal ray\r\n         * @returns {Vector} - ray normal vector\r\n         */\r\n        get norm() {\r\n            return new Vector(0,1);\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between ray and segment or arc\r\n         * @param {Segment|Arc} - Shape to intersect with ray\r\n         * @returns {Array} array of intersection points\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Segment) {\r\n                return this.intersectRay2Segment(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Arc) {\r\n                return this.intersectRay2Arc(this, shape);\r\n            }\r\n        }\r\n\r\n        intersectRay2Segment(ray, segment) {\r\n            let ip = [];\r\n\r\n            if (ray.box.not_intersect(segment.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let line = new Line(ray.start, ray.norm);\r\n            let ip_tmp = line.intersect(segment);\r\n\r\n            for (let pt of ip_tmp) {\r\n                if (Flatten.Utils.GE(pt.x, ray.start.x)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            /* If there were two intersection points between line and ray,\r\n            and now there is exactly one left, it means ray starts between these points\r\n            and there is another intersection point - start of the ray */\r\n            if (ip_tmp.length == 2 && ip.length == 1 && ray.start.on(line)) {\r\n                ip.push(ray.start);\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        intersectRay2Arc(ray, arc) {\r\n            let ip = [];\r\n\r\n            if (ray.box.not_intersect(arc.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let line = new Line(ray.start, ray.norm);\r\n            let ip_tmp = line.intersect(arc);\r\n\r\n            for (let pt of ip_tmp) {\r\n                if (Flatten.Utils.GE(pt.x, ray.start.x)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n        }\r\n    };\r\n\r\n    Flatten.ray = (...args) => new Flatten.Ray(...args);\r\n};","\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Polygon, Point, Segment, Arc, Line, Ray} = Flatten;\r\n\r\n    Flatten.ray_shoot = function(polygon, point) {\r\n        let contains = undefined;\r\n\r\n        // if (!(polygon instanceof Polygon && point instanceof Point)) {\r\n        //     throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        // }\r\n\r\n        // 1. Quick reject\r\n        if (polygon.box.not_intersect(point.box)) {\r\n            return Flatten.OUTSIDE;\r\n        }\r\n\r\n        let ray = new Ray(point);\r\n        let line = new Line(ray.pt, ray.norm);\r\n\r\n        // 2. Locate relevant edges of the polygon\r\n        let resp_edges = polygon.edges.search(ray.box);\r\n\r\n        if (resp_edges.length == 0) {\r\n            return Flatten.OUTSIDE;\r\n        }\r\n\r\n        // 3. Calculate intersections\r\n        let intersections = [];\r\n        for (let edge of resp_edges) {\r\n            for (let ip of ray.intersect(edge.shape)) {\r\n\r\n                // If intersection is equal to query point then point lays on boundary\r\n                if (ip.equalTo(point)) {\r\n                    return Flatten.BOUNDARY;\r\n                }\r\n\r\n                intersections.push({\r\n                    pt: ip,\r\n                    edge: edge\r\n                });\r\n            }\r\n        }\r\n\r\n        // 4. Sort intersection in x-ascending order\r\n        intersections.sort( (i1, i2) => {\r\n            if (Flatten.Utils.LT(i1.pt.x, i2.pt.x)) {\r\n                return -1;\r\n            }\r\n            if (Flatten.Utils.GT(i1.pt.x, i2.pt.x)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        // 5. Count real intersections, exclude touching\r\n        let counter = 0;\r\n\r\n        for (let i=0; i < intersections.length; i++) {\r\n            let intersection = intersections[i];\r\n            if (intersection.pt.equalTo(intersection.edge.shape.start)) {\r\n                /* skip same point between same edges if already counted */\r\n                if (i > 0 && intersection.pt.equalTo(intersections[i-1].pt) &&\r\n                    intersection.edge.prev === intersections[i-1].edge) {\r\n                    continue;\r\n                }\r\n                let prev_edge = intersection.edge.prev;\r\n                while (Flatten.Utils.EQ_0(prev_edge.length)) {\r\n                    prev_edge = prev_edge.prev;\r\n                }\r\n                let prev_tangent = prev_edge.shape.tangentInEnd();\r\n                let prev_point = intersection.pt.translate(prev_tangent);\r\n\r\n                let cur_tangent = intersection.edge.shape.tangentInStart();\r\n                let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n                let prev_on_the_left = prev_point.leftTo(line);\r\n                let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n                if ( (prev_on_the_left && !cur_on_the_left) || (!prev_on_the_left && cur_on_the_left) ) {\r\n                    counter++;\r\n                }\r\n            }\r\n            else if (intersection.pt.equalTo(intersection.edge.shape.end)) {\r\n                /* skip same point between same edges if already counted */\r\n                if (i > 0 && intersection.pt.equalTo(intersections[i-1].pt) &&\r\n                    intersection.edge.next === intersections[i-1].edge) {\r\n                    continue;\r\n                }\r\n                let next_edge = intersection.edge.next;\r\n                while (Flatten.Utils.EQ_0(next_edge.length)) {\r\n                    next_edge = next_edge.next;\r\n                }\r\n                let next_tangent = next_edge.shape.tangentInStart();\r\n                let next_point = intersection.pt.translate(next_tangent);\r\n\r\n                let cur_tangent = intersection.edge.shape.tangentInEnd();\r\n                let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n                let next_on_the_left = next_point.leftTo(line);\r\n                let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n                if ( (next_on_the_left && !cur_on_the_left) || (!next_on_the_left && cur_on_the_left) ) {\r\n                    counter++;\r\n                }\r\n            }\r\n            else {        /* intersection point is not a coincident with a vertex */\r\n                if (intersection.edge.shape instanceof Segment) {\r\n                    counter++;\r\n                }\r\n                else {\r\n                    /* Check if ray does not touch the curve in the extremal (top or bottom) point */\r\n                    let box = intersection.edge.shape.box;\r\n                    if ( !(Flatten.Utils.EQ(intersection.pt.y, box.ymin) ||\r\n                            Flatten.Utils.EQ(intersection.pt.y, box.ymax)) ) {\r\n                        counter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 6. Odd or even?\r\n        contains = counter % 2 == 1 ? Flatten.INSIDE : Flatten.OUTSIDE;\r\n\r\n        return contains;\r\n    };\r\n};","/**\r\n * Created by Alex Bol on 3/15/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Edge, Face, PlanarSet, Box} = Flatten;\r\n    let {ray_shoot} = Flatten;\r\n    /**\r\n     * Class representing a polygon.<br/>\r\n     * Polygon in FlattenJS is a multipolygon comprised from a set of [faces]{@link Flatten.Face}. <br/>\r\n     * Face, in turn, is a closed loop of [edges]{@link Flatten.Edge}, where edge may be segment or circular arc<br/>\r\n     * @type {Polygon}\r\n     */\r\n    Flatten.Polygon = class Polygon {\r\n        /**\r\n         * Constructor creates new instance of polygon.<br/>\r\n         * New polygon is empty. Add face to the polygon using method <br/>\r\n         * <code>\r\n         *     polygon.addFace(Points[]|Segments[]|Arcs[])\r\n         * </code>\r\n         */\r\n        constructor() {\r\n            /**\r\n             * Container of faces (closed loops), may be empty\r\n             * @type {PlanarSet}\r\n             */\r\n            this.faces = new PlanarSet();\r\n            /**\r\n             * Container of edges\r\n             * @type {PlanarSet}\r\n             */\r\n            this.edges = new PlanarSet();\r\n        }\r\n\r\n        /**\r\n         * (Getter) Returns bounding box of the polygon\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return [...this.faces].reduce( (acc, face) => acc.merge(face.box), new Box() );\r\n        }\r\n\r\n        /**\r\n         * (Getter) Returns array of vertices\r\n         * @returns {Array}\r\n         */\r\n        get vertices() {\r\n            return [...this.edges].map( edge => edge.start);\r\n        }\r\n\r\n        /**\r\n         * Return true is polygon has no edges\r\n         * @returns {boolean}\r\n         */\r\n        isEmpty() {\r\n            return this.edges.size === 0;\r\n        }\r\n\r\n        /**\r\n         * Add new face to polygon. Returns added face\r\n         * @param {Points[]|Segments[]|Arcs[]|Circle|Box} args -  new face may be create with one of the following ways: <br/>\r\n         * 1) array of points that describe closed path (edges are segments) <br/>\r\n         * 2) array of shapes (segments and arcs) which describe closed path <br/>\r\n         * 3) circle - will be added as counterclockwise arc <br/>\r\n         * 4) box - will be added as counterclockwise rectangle <br/>\r\n         * You can chain method face.reverse() is you need to change direction of the creates face\r\n         * @returns {Face}\r\n         */\r\n        addFace(...args) {\r\n            let face = new Face(this, ...args);\r\n            this.faces.add(face);\r\n            return face;\r\n        }\r\n\r\n        /**\r\n         * Delete existing face from polygon\r\n         * @param {Face} face Face to be deleted\r\n         * @returns {boolean}\r\n         */\r\n        deleteFace(face) {\r\n            for (let edge of face) {\r\n                let deleted = this.edges.delete(edge);\r\n            }\r\n            let deleted = this.faces.delete(face);\r\n            return deleted;\r\n        }\r\n\r\n        /**\r\n         * Delete chain of edges from the face.\r\n         * @param {Face} face Face to remove chain\r\n         * @param {Edge} edgeFrom Start of the chain of edges to be removed\r\n         * @param {Edge} edgeTo End of the chain of edges to be removed\r\n         */\r\n        removeChain(face, edgeFrom, edgeTo) {\r\n            // Special case: all edges removed\r\n            if (edgeTo.next === edgeFrom) {\r\n                this.deleteFace(face);\r\n                return;\r\n            }\r\n            for (let edge = edgeFrom; edge !== edgeTo.next; edge = edge.next ) {\r\n                face.remove(this.edges, edge);\r\n                // this.edges.delete(edge);      // delete from PlanarSet of edges and update index\r\n                if (face.isEmpty()) {\r\n                    this.deleteFace(face);    // delete from PlanarSet of faces and update index\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Add point as a new vertex and split edge. Point supposed to belong to an edge.\r\n         * When edge is split, new edge created from the start of the edge to the new vertex\r\n         * and inserted before current edge.\r\n         * Current edge is trimmed and updated. Method returns new edge added.\r\n         * @param {Edge} edge Edge to be split with new vertex and then trimmed from start\r\n         * @param {Point} pt Point to be added as a new vertex\r\n         * @returns {Edge}\r\n         */\r\n        addVertex(pt, edge) {\r\n            let shapes = edge.shape.split(pt);\r\n            if (shapes.length < 2) return;\r\n            let newEdge = new Flatten.Edge(shapes[0]);\r\n            let edgeBefore = edge.prev;\r\n\r\n            /* Insert first split edge into linked list after edgeBefore */\r\n            edge.face.insert(this.edges, newEdge, edgeBefore);\r\n\r\n            // Remove old edge from edges container and 2d index\r\n            this.edges.delete(edge);\r\n\r\n            // Update edge shape with second split edge keeping links\r\n            edge.shape = shapes[1];\r\n\r\n            // Add updated edge to the edges container and 2d index\r\n            this.edges.add(edge);\r\n\r\n            return newEdge;\r\n        }\r\n\r\n        reverse() {\r\n            for (let face of this.faces) {\r\n                face.reverse();\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Create new copied instance of the polygon\r\n         * @returns {Polygon}\r\n         */\r\n        clone() {\r\n            let polygon = new Polygon();\r\n            for (let face of this.faces) {\r\n                let shapes = [];\r\n                for (let edge of face) {\r\n                    shapes.push(edge.shape.clone());\r\n                }\r\n                polygon.addFace(shapes);\r\n            }\r\n            return polygon;\r\n        }\r\n\r\n        /**\r\n         * Returns area of the polygon. Area of an island will be added, area of a hole will be subtracted\r\n         * @returns {number}\r\n         */\r\n        area() {\r\n            let signedArea = [...this.faces].reduce((acc,face) => acc + face.signedArea(), 0);\r\n            return Math.abs(signedArea);\r\n        }\r\n\r\n        /**\r\n         * Returns true if polygon contains point, including polygon boundary, false otherwise\r\n         * Point in polygon test based on ray shooting algorithm\r\n         * @param {Point} point - test point\r\n         * @returns {boolean}\r\n         */\r\n        contains(point) {\r\n            let rel = ray_shoot(this, point);\r\n            return (rel == Flatten.INSIDE || rel == Flatten.BOUNDARY) ? true : false;\r\n        }\r\n\r\n        /**\r\n         * Return distance and shortest segment between polygon and other shape as array [distance, shortest_segment]\r\n         * @param {Shape} shape Shape of one of the types Point, Circle, Line, Segment, Arc or Polygon\r\n         * @returns {Number | Segment}\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [dist, shortest_segment] = Distance.point2polygon(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle ||\r\n            shape instanceof Flatten.Line ||\r\n            shape instanceof Flatten.Segment ||\r\n            shape instanceof Flatten.Arc) {\r\n                let [dist, shortest_segment] = Distance.shape2polygon(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            /* this method is bit faster */\r\n            if (shape instanceof  Flatten.Polygon) {\r\n                let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n                let dist, shortest_segment;\r\n\r\n                for (let edge of this.edges) {\r\n                    // let [dist, shortest_segment] = Distance.shape2polygon(edge.shape, shape);\r\n                    let min_stop = min_dist_and_segment[0];\r\n                    [dist, shortest_segment] = Distance.shape2planarSet(edge.shape, shape.edges, min_stop);\r\n                    if (Flatten.Utils.LT(dist, min_stop)) {\r\n                        min_dist_and_segment = [dist, shortest_segment];\r\n                    }\r\n                }\r\n                return min_dist_and_segment;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return array of intersection points between polygon and other shape\r\n         * @param shape Shape of the one of supported types <br/>\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return Polygon.intersectLine2Polygon(shape, this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle ||\r\n                shape instanceof Flatten.Segment ||\r\n                shape instanceof Flatten.Arc) {\r\n                return Polygon.intersectShape2Polygon(shape, this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Polygon.intersectPolygon2Polygon(shape, this);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return true if polygon is valid for boolean operations\r\n         * Polygon is valid if <br/>\r\n         * 1. All faces are simple polygons (there are no self-intersected polygons) <br/>\r\n         * 2. All faces are orientable and there is no island inside island or hole inside hole - TODO <br/>\r\n         * 3. There is no intersections between faces (excluding touching) - TODO <br/>\r\n         * @returns {boolean}\r\n         */\r\n        isValid() {\r\n            let valid = true;\r\n            // 1. Polygon is invalid if at least one face is not simple\r\n            for (let face of this.faces) {\r\n                if (!face.isSimple(this.edges)) {\r\n                    valid = false;\r\n                    break;\r\n                }\r\n            }\r\n            // 2. TODO: check if no island inside island and no hole inside hole\r\n            // 3. TODO: check the there is no intersection between faces\r\n            return valid;\r\n        }\r\n\r\n        /**\r\n         * Returns new polygon translated by vector vec\r\n         * @param {Vector} vec\r\n         * @returns {Polygon}\r\n         */\r\n        translate(vec) {\r\n            let newPolygon = new Polygon();\r\n            for (let face of this.faces) {\r\n                let shapes = [];\r\n                for (let edge of face) {\r\n                    shapes.push(edge.shape.translate(vec));\r\n                }\r\n                newPolygon.addFace(shapes);\r\n            }\r\n            return newPolygon;\r\n        }\r\n\r\n        /**\r\n         * Return new polygon rotated by given angle around given point\r\n         * If point omitted, rotate around origin (0,0)\r\n         * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n         * @param {number} angle - rotation angle in radians\r\n         * @param {Point} center - rotation center, default is (0,0)\r\n         * @returns {Polygon} - new rotated polygon\r\n         */\r\n        rotate(angle=0, center=new Flatten.Point()) {\r\n            let newPolygon = new Polygon();\r\n            for (let face of this.faces) {\r\n                let shapes = [];\r\n                for (let edge of face) {\r\n                    shapes.push(edge.shape.rotate(angle, center));\r\n                }\r\n                newPolygon.addFace(shapes);\r\n            }\r\n            return newPolygon;\r\n        }\r\n\r\n        /**\r\n         * Return new polygon transformed using affine transformation matrix\r\n         * @param {Matrix} matrix - affine transformation matrix\r\n         * @returns {Polygon} - new polygon\r\n         */\r\n        transform(matrix = new Flatten.Matrix()) {\r\n            let newPolygon = new Polygon();\r\n            for (let face of this.faces) {\r\n                let shapes = [];\r\n                for (let edge of face) {\r\n                    shapes.push(edge.shape.transform(matrix));\r\n                }\r\n                newPolygon.addFace(shapes);\r\n            }\r\n            return newPolygon;\r\n        }\r\n\r\n        static intersectShape2Polygon(shape, polygon) {\r\n            let ip = [];\r\n\r\n            if ( polygon.isEmpty() || shape.box.not_intersect(polygon.box) ) {\r\n                return ip;\r\n            }\r\n\r\n            let resp_edges = polygon.edges.search(shape.box);\r\n\r\n            for (let edge of resp_edges) {\r\n                for (let pt of shape.intersect(edge.shape)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        static intersectLine2Polygon(line, polygon) {\r\n            let ip = [];\r\n\r\n            if ( polygon.isEmpty() ) {\r\n                return ip;\r\n            }\r\n\r\n            for (let edge of polygon.edges) {\r\n                for (let pt of line.intersect(edge.shape)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        static intersectPolygon2Polygon(polygon1, polygon2) {\r\n            let ip = [];\r\n\r\n            if (polygon1.isEmpty() || polygon2.isEmpty()) {\r\n                return ip;\r\n            }\r\n\r\n            if (polygon1.box.not_intersect(polygon2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            for (let edge1 of polygon1.edges) {\r\n                for (let pt of Polygon.intersectShape2Polygon(edge1.shape, polygon2)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        /**\r\n         * Return string to draw polygon in svg\r\n         * @param attrs  - an object with attributes for svg path element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\", \"fillRule\", \"fillOpacity\"\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"lightcyan\", fillRule:\"evenodd\", fillOpacity: \"1\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {stroke, strokeWidth, fill, fillRule, fillOpacity, id, className} = attrs;\r\n            // let restStr = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n            let svgStr = `\\n<path stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"lightcyan\"}\" fill-rule=\"${fillRule || \"evenodd\"}\" fill-opacity=\"${fillOpacity || 1.0}\" ${id_str} ${class_str} d=\"`;\r\n            for (let face of this.faces) {\r\n                svgStr += face.svg();\r\n            }\r\n            svgStr += `\" >\\n</path>`;\r\n            return svgStr;\r\n        }\r\n\r\n        /**\r\n         * This method returns an object that defines how data will be\r\n         * serialized when called JSON.stringify() method\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return [...this.faces].map(face => face.toJSON());\r\n        }\r\n    }\r\n};","\"use strict\";\r\n\r\nlet IntervalTree = require('flatten-interval-tree');\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Polygon, Point, Segment, Arc, Circle, Line, Ray, Vector} = Flatten;\r\n\r\n    let {vector} = Flatten;\r\n\r\n    Flatten.Distance = class Distance {\r\n        /**\r\n         * Calculate distance and shortest segment between points\r\n         * @param pt1\r\n         * @param pt2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2point(pt1, pt2) {\r\n            return pt1.distanceTo(pt2);\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and line\r\n         * @param pt\r\n         * @param line\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2line(pt, line) {\r\n            let closest_point = pt.projectionOn(line);\r\n            let vec = vector(pt, closest_point);\r\n            return [vec.length, new Segment(pt, closest_point)];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and circle\r\n         * @param pt\r\n         * @param circle\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2circle(pt, circle) {\r\n            let [dist2center, shortest_dist] = pt.distanceTo(circle.center);\r\n            if (Flatten.Utils.EQ_0(dist2center)) {\r\n                return [circle.r, new Segment(pt, circle.toArc().start)];\r\n            }\r\n            else {\r\n                let dist = Math.abs(dist2center - circle.r);\r\n                let v = vector(circle.pc, pt).normalize().multiply(circle.r);\r\n                let closest_point = circle.pc.translate(v);\r\n                return [dist, new Segment(pt, closest_point)];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and segment\r\n         * @param pt\r\n         * @param segment\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2segment(pt, segment) {\r\n            /* Degenerated case of zero-length segment */\r\n            if (segment.start.equalTo(segment.end)) {\r\n                return  Distance.point2point(pt, segment.start);\r\n            }\r\n\r\n            let v_seg = new Flatten.Vector(segment.start, segment.end);\r\n            let v_ps2pt = new Flatten.Vector(segment.start, pt);\r\n            let v_pe2pt = new Flatten.Vector(segment.end, pt);\r\n            let start_sp = v_seg.dot(v_ps2pt);\r\n            /* dot product v_seg * v_ps2pt */\r\n            let end_sp = -v_seg.dot(v_pe2pt);\r\n            /* minus dot product v_seg * v_pe2pt */\r\n\r\n            let dist;\r\n            let closest_point;\r\n            if (Flatten.Utils.GE(start_sp, 0) && Flatten.Utils.GE(end_sp, 0)) {    /* point inside segment scope */\r\n                let v_unit = segment.tangentInStart(); // new Flatten.Vector(v_seg.x / this.length, v_seg.y / this.length);\r\n                /* unit vector ||v_unit|| = 1 */\r\n                dist = Math.abs(v_unit.cross(v_ps2pt));\r\n                /* dist = abs(v_unit x v_ps2pt) */\r\n                closest_point = segment.start.translate(v_unit.multiply(v_unit.dot(v_ps2pt)));\r\n                return [dist, new Segment(pt, closest_point)];\r\n            }\r\n            else if (start_sp < 0) {                             /* point is out of scope closer to ps */\r\n                return pt.distanceTo(segment.start);\r\n            }\r\n            else {                                               /* point is out of scope closer to pe */\r\n                return pt.distanceTo(segment.end);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and arc\r\n         * @param pt\r\n         * @param arc\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2arc(pt, arc) {\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n            let dist_and_segment = [];\r\n            let dist, shortest_segment;\r\n            [dist, shortest_segment] = Distance.point2circle(pt, circle);\r\n            if (shortest_segment.end.on(arc)) {\r\n                dist_and_segment.push(Distance.point2circle(pt, circle));\r\n            }\r\n            dist_and_segment.push( Distance.point2point(pt, arc.start) );\r\n            dist_and_segment.push( Distance.point2point(pt, arc.end) );\r\n\r\n            Distance.sort(dist_and_segment);\r\n\r\n            return dist_and_segment[0];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between segment and line\r\n         * @param seg\r\n         * @param line\r\n         * @returns {Number | Segment}\r\n         */\r\n        static segment2line(seg, line) {\r\n            let ip = seg.intersect(line);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0],ip[0])];   // distance = 0, closest point is the first point\r\n            }\r\n            let dist_and_segment = [];\r\n            dist_and_segment.push(Distance.point2line(seg.start, line));\r\n            dist_and_segment.push(Distance.point2line(seg.end, line));\r\n\r\n            Distance.sort( dist_and_segment );\r\n            return dist_and_segment[0];\r\n\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two segments\r\n         * @param seg1\r\n         * @param seg2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static segment2segment(seg1, seg2) {\r\n            let ip = Segment.intersectSegment2Segment(seg1, seg2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0],ip[0])];   // distance = 0, closest point is the first point\r\n            }\r\n\r\n            // Seg1 and seg2 not intersected\r\n            let dist_and_segment = [];\r\n\r\n            dist_and_segment.push(Distance.point2segment(seg2.start, seg1));\r\n            dist_and_segment.push(Distance.point2segment(seg2.end, seg1));\r\n            dist_and_segment.push(Distance.point2segment(seg1.start, seg2));\r\n            dist_and_segment.push(Distance.point2segment(seg1.end, seg2));\r\n\r\n            Distance.sort( dist_and_segment );\r\n            return dist_and_segment[0];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between segment and circle\r\n         * @param seg\r\n         * @param circle\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static segment2circle(seg, circle) {\r\n            /* Case 1 Segment and circle intersected. Return the first point and zero distance */\r\n            let ip = seg.intersect(circle);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            // No intersection between segment and circle\r\n\r\n            /* Case 2. Distance to projection of center point to line bigger than radius\r\n             * And projection point belong to segment\r\n              * Then measure again distance from projection to circle and return it */\r\n            let line = new Flatten.Line(seg.ps, seg.pe);\r\n            let [dist, shortest_segment] = Distance.point2line(circle.center, line);\r\n            if (Flatten.Utils.GE(dist, circle.r) && shortest_segment.end.on(seg)) {\r\n                return Distance.point2circle(shortest_segment.end, circle);\r\n            }\r\n            /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n            else {\r\n                let [dist_from_start, shortest_segment_from_start] = Distance.point2circle(seg.start, circle);\r\n                let [dist_from_end, shortest_segment_from_end] = Distance.point2circle(seg.end, circle);\r\n                return Flatten.Utils.LT(dist_from_start, dist_from_end) ?\r\n                    [dist_from_start, shortest_segment_from_start] :\r\n                    [dist_from_end, shortest_segment_from_end];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between segment and arc\r\n         * @param seg\r\n         * @param arc\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static segment2arc(seg, arc) {\r\n            /* Case 1 Segment and arc intersected. Return the first point and zero distance */\r\n            let ip = seg.intersect(arc);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            // No intersection between segment and arc\r\n            let line = new Flatten.Line(seg.ps, seg.pe);\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n            /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n             * projection point belongs to segment AND\r\n               * distance from projection point to circle belongs to arc  =>\r\n               * return this distance from projection to circle */\r\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n            if (Flatten.Utils.GE(dist_from_center, circle.r) && shortest_segment_from_center.end.on(seg)) {\r\n                let [dist_from_projection, shortest_segment_from_projection] =\r\n                    Distance.point2circle(shortest_segment_from_center.end, circle);\r\n                if (shortest_segment_from_projection.end.on(arc)) {\r\n                    return [dist_from_projection, shortest_segment_from_projection];\r\n                }\r\n            }\r\n            /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n            let dist_and_segment = [];\r\n            dist_and_segment.push(Distance.point2arc(seg.start, arc));\r\n            dist_and_segment.push(Distance.point2arc(seg.end, arc));\r\n\r\n            let dist_tmp, segment_tmp;\r\n            [dist_tmp, segment_tmp] = Distance.point2segment(arc.start, seg);\r\n            dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2segment(arc.end, seg);\r\n            dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n            Distance.sort(dist_and_segment);\r\n            return dist_and_segment[0];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two circles\r\n         * @param circle1\r\n         * @param circle2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static circle2circle(circle1, circle2) {\r\n            let ip = circle1.intersect(circle2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            // Case 1. Concentric circles. Convert to arcs and take distance between two arc starts\r\n            if (circle1.center.equalTo(circle2.center)) {\r\n                let arc1 = circle1.toArc();\r\n                let arc2 = circle2.toArc();\r\n                return Distance.point2point(arc1.start, arc2.start);\r\n            }\r\n            else {\r\n                // Case 2. Not concentric circles\r\n                let line = new Line(circle1.center, circle2.center);\r\n                let ip1 = line.intersect(circle1);\r\n                let ip2 = line.intersect(circle2);\r\n\r\n                let dist_and_segment = [];\r\n\r\n                dist_and_segment.push(Distance.point2point(ip1[0], ip2[0]));\r\n                dist_and_segment.push(Distance.point2point(ip1[0], ip2[1]));\r\n                dist_and_segment.push(Distance.point2point(ip1[1], ip2[0]));\r\n                dist_and_segment.push(Distance.point2point(ip1[1], ip2[1]));\r\n\r\n                Distance.sort(dist_and_segment);\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two circles\r\n         * @param circle\r\n         * @param line\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static circle2line(circle, line) {\r\n            let ip = circle.intersect(line);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n            let [dist, shortest_segment] = Distance.point2circle(shortest_segment_from_center.end, circle);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between arc and line\r\n         * @param arc\r\n         * @param line\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static arc2line(arc, line) {\r\n            /* Case 1 Line and arc intersected. Return the first point and zero distance */\r\n            let ip = line.intersect(arc);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let circle = new Flatten.Circle(arc.center, arc.r);\r\n\r\n            /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n             * projection point belongs to segment AND\r\n               * distance from projection point to circle belongs to arc  =>\r\n               * return this distance from projection to circle */\r\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n            if (Flatten.Utils.GE(dist_from_center, circle.r)) {\r\n                let [dist_from_projection, shortest_segment_from_projection] =\r\n                    Distance.point2circle(shortest_segment_from_center.end, circle);\r\n                if (shortest_segment_from_projection.end.on(arc)) {\r\n                    return [dist_from_projection, shortest_segment_from_projection];\r\n                }\r\n            }\r\n            else {\r\n                let dist_and_segment = [];\r\n                dist_and_segment.push( Distance.point2line(arc.start, line) );\r\n                dist_and_segment.push( Distance.point2line(arc.end, line) );\r\n\r\n                Distance.sort(dist_and_segment);\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between arc and circle\r\n         * @param arc\r\n         * @param circle2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static arc2circle(arc, circle2) {\r\n            let ip = arc.intersect(circle2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let circle1 = new Flatten.Circle(arc.center, arc.r);\r\n\r\n            let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n            if (shortest_segment.start.on(arc)) {\r\n                return [dist, shortest_segment];\r\n            }\r\n            else {\r\n                let dist_and_segment = [];\r\n\r\n                dist_and_segment.push(Distance.point2circle(arc.start, circle2));\r\n                dist_and_segment.push(Distance.point2circle(arc.end, circle2));\r\n\r\n                Distance.sort(dist_and_segment);\r\n\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two arcs\r\n         * @param arc1\r\n         * @param arc2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static arc2arc(arc1, arc2) {\r\n            let ip = arc1.intersect(arc2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let circle1 = new Flatten.Circle(arc1.center, arc1.r);\r\n            let circle2 = new Flatten.Circle(arc2.center, arc2.r);\r\n\r\n            let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n            if (shortest_segment.start.on(arc1) && shortest_segment.end.on(arc2)) {\r\n                return [dist, shortest_segment];\r\n            }\r\n            else {\r\n                let dist_and_segment = [];\r\n\r\n                let dist_tmp, segment_tmp;\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc1.start, arc2);\r\n                if (segment_tmp.end.on(arc2)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc1.end, arc2);\r\n                if (segment_tmp.end.on(arc2)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc2.start, arc1);\r\n                if (segment_tmp.end.on(arc1)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc2.end, arc1);\r\n                if (segment_tmp.end.on(arc1)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.start);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.end);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.start);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.end);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                Distance.sort(dist_and_segment);\r\n\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and polygon\r\n         * @param point\r\n         * @param polygon\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2polygon(point, polygon) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = (edge.shape instanceof Segment) ?\r\n                    Distance.point2segment(point, edge.shape) : Distance.point2arc(point, edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static shape2polygon(shape, polygon) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = shape.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n/*\r\n        static arc2polygon(arc, polygon) {\r\n            let ip = arc.intersect(polygon);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = arc.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static line2polygon(line, polygon) {\r\n            let ip = line.intersect(polygon);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = line.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static circle2polygon(circle, polygon) {\r\n            let ip = circle.intersect(polygon);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = circle.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n*/\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two polygons\r\n         * @param polygon1\r\n         * @param polygon2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static polygon2polygon(polygon1, polygon2) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n            for (let edge1 of polygon1.edges) {\r\n                for (let edge2 of polygon2.edges) {\r\n                    let [dist, shortest_segment] = edge1.shape.distanceTo(edge2.shape);\r\n                    if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                        min_dist_and_segment = [dist, shortest_segment];\r\n                    }\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        /**\r\n         * Returns [mindist, maxdist] array of squared minimal and maximal distance between boxes\r\n         * Minimal distance by x is\r\n         *    (box2.xmin - box1.xmax), if box1 is left to box2\r\n         *    (box1.xmin - box2.xmax), if box2 is left to box1\r\n         *    0,                       if box1 and box2 are intersected by x\r\n         * Minimal distance by y is defined in the same way\r\n         *\r\n         * Maximal distance is estimated as a sum of squared dimensions of the merged box\r\n         *\r\n         * @param box1\r\n         * @param box2\r\n         * @returns {Number | Number} - minimal and maximal distance\r\n         */\r\n        static box2box_minmax(box1, box2) {\r\n            let mindist_x = Math.max( Math.max(box1.xmin - box2.xmax, 0), Math.max(box2.xmin - box1.xmax, 0) );\r\n            let mindist_y = Math.max( Math.max(box1.ymin - box2.ymax, 0), Math.max(box2.ymin - box1.ymax, 0) );\r\n            let mindist = mindist_x*mindist_x + mindist_y*mindist_y;\r\n\r\n            let box = box1.merge(box2);\r\n            let dx = box.xmax - box.xmin;\r\n            let dy = box.ymax - box.ymin;\r\n            let maxdist = dx*dx + dy*dy;\r\n\r\n            return [mindist, maxdist];\r\n        }\r\n\r\n        static minmax_tree_process_level(shape, level, min_stop, tree) {\r\n            // Calculate minmax distance to each shape in current level\r\n            // Insert result into the interval tree for further processing\r\n            // update min_stop with maxdist, it will be the new stop distance\r\n            let mindist, maxdist;\r\n            for (let node of level) {\r\n\r\n                // [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n                // if (Flatten.Utils.GT(mindist, min_stop))\r\n                //     continue;\r\n\r\n                // Estimate min-max dist to the shape stored in the node.item, using node.item.key which is shape's box\r\n                [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.item.key);\r\n                if (node.item.value instanceof Flatten.Edge) {\r\n                    tree.insert([mindist, maxdist], node.item.value.shape);\r\n                }\r\n                else {\r\n                    tree.insert([mindist, maxdist], node.item.value);\r\n                }\r\n                if (Flatten.Utils.LT(maxdist, min_stop)) {\r\n                    min_stop = maxdist;                       // this will be the new distance estimation\r\n                }\r\n            }\r\n\r\n            if (level.length === 0)\r\n                return min_stop;\r\n\r\n            // Calculate new level from left and right children of the current\r\n            let new_level_left = level.map(node => node.left.isNil() ? undefined : node.left ).filter(node => node !== undefined);\r\n            let new_level_right = level.map(node => node.right.isNil() ? undefined : node.right).filter(node => node !== undefined);\r\n            // Merge left and right subtrees and leave only relevant subtrees\r\n            let new_level = [...new_level_left, ...new_level_right].filter( node => {\r\n                // Node subtree quick reject, node.max is a subtree box\r\n                let [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n                return (Flatten.Utils.LE(mindist, min_stop));\r\n            });\r\n\r\n            min_stop = Distance.minmax_tree_process_level(shape, new_level, min_stop, tree);\r\n            return min_stop;\r\n        }\r\n\r\n        /**\r\n         * Calculates sorted tree of [mindist, maxdist] intervals between query shape\r\n         * and shapes of the planar set.\r\n         * @param shape\r\n         * @param set\r\n         */\r\n        static minmax_tree(shape, set, min_stop) {\r\n            let tree = new IntervalTree();\r\n            let level = [set.index.root];\r\n            let squared_min_stop = min_stop < Number.POSITIVE_INFINITY ? min_stop*min_stop : Number.POSITIVE_INFINITY;\r\n            squared_min_stop = Distance.minmax_tree_process_level(shape, level, squared_min_stop, tree);\r\n            return tree;\r\n        }\r\n\r\n        static minmax_tree_calc_distance(shape, node, min_dist_and_segment) {\r\n            let min_dist_and_segment_new, stop;\r\n            if (node != null && !node.isNil()) {\r\n                [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.left, min_dist_and_segment);\r\n\r\n                if (stop) {\r\n                    return [min_dist_and_segment_new, stop];\r\n                }\r\n\r\n                if (Flatten.Utils.LT(min_dist_and_segment_new[0], Math.sqrt(node.item.key.low))) {\r\n                    return [min_dist_and_segment_new, true];   // stop condition\r\n                }\r\n\r\n                let [dist, shortest_segment] = Distance.distance(shape, node.item.value);\r\n                // console.log(dist)\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment_new[0])) {\r\n                    min_dist_and_segment_new = [dist, shortest_segment];\r\n                }\r\n\r\n                [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.right, min_dist_and_segment_new);\r\n\r\n                return [min_dist_and_segment_new, stop];\r\n            }\r\n\r\n            return [min_dist_and_segment, false];\r\n        }\r\n\r\n        /**\r\n         * Calculates distance between shape and Planar Set of shapes\r\n         * @param shape\r\n         * @param {PlanarSet} set\r\n         * @param {Number} min_stop\r\n         * @returns {*}\r\n         */\r\n        static shape2planarSet(shape, set, min_stop = Number.POSITIVE_INFINITY) {\r\n            let min_dist_and_segment = [min_stop, new Flatten.Segment()];\r\n            let stop = false;\r\n            if (set instanceof Flatten.PlanarSet) {\r\n                let tree = Distance.minmax_tree(shape, set, min_stop);\r\n                [min_dist_and_segment, stop] = Distance.minmax_tree_calc_distance(shape, tree.root, min_dist_and_segment);\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static sort(dist_and_segment) {\r\n            dist_and_segment.sort((d1, d2) => {\r\n                if (Flatten.Utils.LT(d1[0], d2[0])) {\r\n                    return -1;\r\n                }\r\n                if (Flatten.Utils.GT(d1[0], d2[0])) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        static distance(shape1, shape2) {\r\n            return shape1.distanceTo(shape2);\r\n        }\r\n    }\r\n};"],"sourceRoot":""}